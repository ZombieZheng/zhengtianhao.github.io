<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Zombies</title>
    <link>http://example.com/</link>
    
    <atom:link href="http://example.com/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>不忘初心,砥砺前行</description>
    <pubDate>Sun, 13 Jun 2021 15:05:24 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>java类和对象</title>
      <link>http://example.com/2021/06/13/java%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1/</link>
      <guid>http://example.com/2021/06/13/java%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1/</guid>
      <pubDate>Sun, 13 Jun 2021 12:21:13 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;类和对象&quot;&gt;&lt;a href=&quot;#类和对象&quot; class=&quot;headerlink&quot; title=&quot;类和对象&quot;&gt;&lt;/a&gt;类和对象&lt;/h1&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h1><span id="more"></span><h1 id="面向对象概述"><a href="#面向对象概述" class="headerlink" title="面向对象概述"></a>面向对象概述</h1><h2 id="面向对象设计实质上就是对现实世界的对象进行建模操作"><a href="#面向对象设计实质上就是对现实世界的对象进行建模操作" class="headerlink" title="面向对象设计实质上就是对现实世界的对象进行建模操作."></a>面向对象设计实质上就是对现实世界的对象进行建模操作.</h2><h2 id="类和对象的关系"><a href="#类和对象的关系" class="headerlink" title="类和对象的关系"></a>类和对象的关系</h2><h3 id="实质上可以将类看作是对象的载体-它定义了对象所具有的功能"><a href="#实质上可以将类看作是对象的载体-它定义了对象所具有的功能" class="headerlink" title="实质上可以将类看作是对象的载体,它定义了对象所具有的功能"></a>实质上可以将类看作是对象的载体,它定义了对象所具有的功能</h3><h3 id="类是世间事物的抽象称呼-而对象则是这个事物相对应的实体"><a href="#类是世间事物的抽象称呼-而对象则是这个事物相对应的实体" class="headerlink" title="类是世间事物的抽象称呼,而对象则是这个事物相对应的实体."></a>类是世间事物的抽象称呼,而对象则是这个事物相对应的实体.</h3><h3 id="如果面临实际问题-通常需要实例化类对象来解决"><a href="#如果面临实际问题-通常需要实例化类对象来解决" class="headerlink" title="如果面临实际问题,通常需要实例化类对象来解决"></a>如果面临实际问题,通常需要实例化类对象来解决</h3><h3 id="类是封装对象的属性和行为的载体-反过来说具有相同属性和行为的一类实体被成为类-而对象则是类抽象出来的一个实例"><a href="#类是封装对象的属性和行为的载体-反过来说具有相同属性和行为的一类实体被成为类-而对象则是类抽象出来的一个实例" class="headerlink" title="类是封装对象的属性和行为的载体.反过来说具有相同属性和行为的一类实体被成为类,而对象则是类抽象出来的一个实例"></a>类是封装对象的属性和行为的载体.反过来说具有相同属性和行为的一类实体被成为类,而对象则是类抽象出来的一个实例</h3><h3 id="类中对象的行为是以方法的形式定义的-对象的属性是以成员变量的形式定义的-而类包括对象的属性和方法"><a href="#类中对象的行为是以方法的形式定义的-对象的属性是以成员变量的形式定义的-而类包括对象的属性和方法" class="headerlink" title="类中对象的行为是以方法的形式定义的,对象的属性是以成员变量的形式定义的,而类包括对象的属性和方法"></a>类中对象的行为是以方法的形式定义的,对象的属性是以成员变量的形式定义的,而类包括对象的属性和方法</h3><h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3><h4 id="思想"><a href="#思想" class="headerlink" title="思想"></a>思想</h4><h5 id="是面向对象的核心思想"><a href="#是面向对象的核心思想" class="headerlink" title="是面向对象的核心思想"></a>是面向对象的核心思想</h5><h5 id="将对象的属性和行为封装起来-其载体就是类-类通过对客户隐藏其实现细节"><a href="#将对象的属性和行为封装起来-其载体就是类-类通过对客户隐藏其实现细节" class="headerlink" title="将对象的属性和行为封装起来,其载体就是类,类通过对客户隐藏其实现细节."></a>将对象的属性和行为封装起来,其载体就是类,类通过对客户隐藏其实现细节.</h5><h5 id="采用封装的思想保证了类内部数据结构的完整性-应用该类的的用户不能轻易地直接操作此数据结构-只能执行类允许公开的数据"><a href="#采用封装的思想保证了类内部数据结构的完整性-应用该类的的用户不能轻易地直接操作此数据结构-只能执行类允许公开的数据" class="headerlink" title="采用封装的思想保证了类内部数据结构的完整性,应用该类的的用户不能轻易地直接操作此数据结构,只能执行类允许公开的数据."></a>采用封装的思想保证了类内部数据结构的完整性,应用该类的的用户不能轻易地直接操作此数据结构,只能执行类允许公开的数据.</h5><h6 id="这样就避免了外部操作对内部数据的影响-提高了程序的可维护性"><a href="#这样就避免了外部操作对内部数据的影响-提高了程序的可维护性" class="headerlink" title="这样就避免了外部操作对内部数据的影响,提高了程序的可维护性."></a>这样就避免了外部操作对内部数据的影响,提高了程序的可维护性.</h6><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><h4 id="思想-当处理一个问题时-可以将一些有用的类保留下来-在遇到同样问题时拿来复用"><a href="#思想-当处理一个问题时-可以将一些有用的类保留下来-在遇到同样问题时拿来复用" class="headerlink" title="思想:当处理一个问题时,可以将一些有用的类保留下来,在遇到同样问题时拿来复用."></a>思想:当处理一个问题时,可以将一些有用的类保留下来,在遇到同样问题时拿来复用.</h4><h5 id="可见设计软件的代码时使用继承思想可以缩短软件开发的时间-复用那些已经定义好的类可以提高系统性能-减少系统在使用过程中出现错误的机率"><a href="#可见设计软件的代码时使用继承思想可以缩短软件开发的时间-复用那些已经定义好的类可以提高系统性能-减少系统在使用过程中出现错误的机率" class="headerlink" title="可见设计软件的代码时使用继承思想可以缩短软件开发的时间,复用那些已经定义好的类可以提高系统性能,减少系统在使用过程中出现错误的机率."></a>可见设计软件的代码时使用继承思想可以缩短软件开发的时间,复用那些已经定义好的类可以提高系统性能,减少系统在使用过程中出现错误的机率.</h5><h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><h4 id="思想-1"><a href="#思想-1" class="headerlink" title="思想"></a>思想</h4><h5 id="其实将父类对象应用于子类的特征就是多态"><a href="#其实将父类对象应用于子类的特征就是多态" class="headerlink" title="其实将父类对象应用于子类的特征就是多态"></a>其实将父类对象应用于子类的特征就是多态</h5><h5 id="多态性允许以统一的风格编写程序-以处理种类繁多的已存在的类及相关类-该统一的风格可以由父类来实现-根据父类统一风格的处理-可以实例化子类的对象-由于整个事件的处理都只依赖于父类的方法-所以日后只要维护和调整父类的方法即可-这样就降低了维护的难度-节省了时间"><a href="#多态性允许以统一的风格编写程序-以处理种类繁多的已存在的类及相关类-该统一的风格可以由父类来实现-根据父类统一风格的处理-可以实例化子类的对象-由于整个事件的处理都只依赖于父类的方法-所以日后只要维护和调整父类的方法即可-这样就降低了维护的难度-节省了时间" class="headerlink" title="多态性允许以统一的风格编写程序,以处理种类繁多的已存在的类及相关类.该统一的风格可以由父类来实现,根据父类统一风格的处理,可以实例化子类的对象.由于整个事件的处理都只依赖于父类的方法,所以日后只要维护和调整父类的方法即可,这样就降低了维护的难度,节省了时间."></a>多态性允许以统一的风格编写程序,以处理种类繁多的已存在的类及相关类.该统一的风格可以由父类来实现,根据父类统一风格的处理,可以实例化子类的对象.由于整个事件的处理都只依赖于父类的方法,所以日后只要维护和调整父类的方法即可,这样就降低了维护的难度,节省了时间.</h5><h5 id="多态的实现并不依赖具体类-而是依赖于抽象类和接口"><a href="#多态的实现并不依赖具体类-而是依赖于抽象类和接口" class="headerlink" title="多态的实现并不依赖具体类,而是依赖于抽象类和接口"></a>多态的实现并不依赖具体类,而是依赖于抽象类和接口</h5><h5 id="在多态的机制中-比抽象类更方便的方式是将抽象类定义为接口"><a href="#在多态的机制中-比抽象类更方便的方式是将抽象类定义为接口" class="headerlink" title="在多态的机制中,比抽象类更方便的方式是将抽象类定义为接口"></a>在多态的机制中,比抽象类更方便的方式是将抽象类定义为接口</h5><h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><h3 id="成员变量"><a href="#成员变量" class="headerlink" title="成员变量"></a>成员变量</h3><h4 id="Java中对象的属性"><a href="#Java中对象的属性" class="headerlink" title="Java中对象的属性"></a>Java中对象的属性</h4><h3 id="成员方法"><a href="#成员方法" class="headerlink" title="成员方法"></a>成员方法</h3><h4 id="权限修饰符-返回值类型-方法名-参数类型-参数名-方法体-return-返回值"><a href="#权限修饰符-返回值类型-方法名-参数类型-参数名-方法体-return-返回值" class="headerlink" title="权限修饰符 返回值类型 方法名(参数类型 参数名){//方法体; return 返回值;}"></a><code>权限修饰符 返回值类型 方法名(参数类型 参数名)&#123;//方法体; return 返回值;&#125;</code></h4><h4 id="Java中的成员无返回值可以使用void关键字表示-有的话要与方法返回的值类型一致"><a href="#Java中的成员无返回值可以使用void关键字表示-有的话要与方法返回的值类型一致" class="headerlink" title="Java中的成员无返回值可以使用void关键字表示,有的话要与方法返回的值类型一致"></a>Java中的成员无返回值可以使用void关键字表示,有的话要与方法返回的值类型一致</h4><h4 id="如果一个方法中含有与成员变量同名的局部变量-则方法中对这个变量的访问以局部变量进行"><a href="#如果一个方法中含有与成员变量同名的局部变量-则方法中对这个变量的访问以局部变量进行" class="headerlink" title="如果一个方法中含有与成员变量同名的局部变量,则方法中对这个变量的访问以局部变量进行."></a>如果一个方法中含有与成员变量同名的局部变量,则方法中对这个变量的访问以局部变量进行.</h4><h4 id="类成员变量和类成员方法也可以统称为类成员"><a href="#类成员变量和类成员方法也可以统称为类成员" class="headerlink" title="类成员变量和类成员方法也可以统称为类成员"></a>类成员变量和类成员方法也可以统称为类成员</h4><h3 id="权限修饰符"><a href="#权限修饰符" class="headerlink" title="权限修饰符"></a>权限修饰符</h3><h4 id="private-只能在本类中使用-在子类中是不可见的-并且对其他包的类是不可见的"><a href="#private-只能在本类中使用-在子类中是不可见的-并且对其他包的类是不可见的" class="headerlink" title="private:只能在本类中使用,在子类中是不可见的,并且对其他包的类是不可见的"></a>private:只能在本类中使用,在子类中是不可见的,并且对其他包的类是不可见的</h4><h4 id="public-除了在本类中使用外-还可以在子类和其他包的类中使用"><a href="#public-除了在本类中使用外-还可以在子类和其他包的类中使用" class="headerlink" title="public:除了在本类中使用外,还可以在子类和其他包的类中使用."></a>public:除了在本类中使用外,还可以在子类和其他包的类中使用.</h4><h4 id="protected-本包内的该类的子类和其他类可以访问"><a href="#protected-本包内的该类的子类和其他类可以访问" class="headerlink" title="protected:本包内的该类的子类和其他类可以访问."></a>protected:本包内的该类的子类和其他类可以访问.</h4><h4 id="当声明类时不使用public、protected和private修饰符设置类的权限，则这个类预设为包存取范围，即只有一个包中的类可以调用这个类的成员变量或成员方法。"><a href="#当声明类时不使用public、protected和private修饰符设置类的权限，则这个类预设为包存取范围，即只有一个包中的类可以调用这个类的成员变量或成员方法。" class="headerlink" title="当声明类时不使用public、protected和private修饰符设置类的权限，则这个类预设为包存取范围，即只有一个包中的类可以调用这个类的成员变量或成员方法。"></a>当声明类时不使用public、protected和private修饰符设置类的权限，则这个类预设为包存取范围，即只有一个包中的类可以调用这个类的成员变量或成员方法。</h4><h3 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h3><h4 id="方法内的变量"><a href="#方法内的变量" class="headerlink" title="方法内的变量"></a>方法内的变量</h4><h4 id="是在方法被创建时创建-在方法执行结束后销毁-作用域也在这期间-在互相不嵌套的作用域中可以同时声明两个名称和内容相同的局部变量"><a href="#是在方法被创建时创建-在方法执行结束后销毁-作用域也在这期间-在互相不嵌套的作用域中可以同时声明两个名称和内容相同的局部变量" class="headerlink" title="是在方法被创建时创建,在方法执行结束后销毁.作用域也在这期间,在互相不嵌套的作用域中可以同时声明两个名称和内容相同的局部变量."></a>是在方法被创建时创建,在方法执行结束后销毁.作用域也在这期间,在互相不嵌套的作用域中可以同时声明两个名称和内容相同的局部变量.</h4><h4 id="在作用域范围外使用局部变量是一个常见的错误-因为在作用范围外没有声明局部变量的代码"><a href="#在作用域范围外使用局部变量是一个常见的错误-因为在作用范围外没有声明局部变量的代码" class="headerlink" title="在作用域范围外使用局部变量是一个常见的错误,因为在作用范围外没有声明局部变量的代码."></a>在作用域范围外使用局部变量是一个常见的错误,因为在作用范围外没有声明局部变量的代码.</h4><h4 id="在使用时必须进行赋值操作或被初始化-否则会出现编译错误"><a href="#在使用时必须进行赋值操作或被初始化-否则会出现编译错误" class="headerlink" title="在使用时必须进行赋值操作或被初始化,否则会出现编译错误"></a>在使用时必须进行赋值操作或被初始化,否则会出现编译错误</h4><h3 id="this关键字"><a href="#this关键字" class="headerlink" title="this关键字"></a>this关键字</h3><h4 id="在Java语言中规定使用this关键字来代表苯类对象的引用-this关键字被隐式的用于引用对象的成员变量和方法"><a href="#在Java语言中规定使用this关键字来代表苯类对象的引用-this关键字被隐式的用于引用对象的成员变量和方法" class="headerlink" title="在Java语言中规定使用this关键字来代表苯类对象的引用,this关键字被隐式的用于引用对象的成员变量和方法."></a>在Java语言中规定使用this关键字来代表苯类对象的引用,this关键字被隐式的用于引用对象的成员变量和方法.</h4><h4 id="this除了可以调用成员变量或成员方法之外-还可以作为方法的返回值"><a href="#this除了可以调用成员变量或成员方法之外-还可以作为方法的返回值" class="headerlink" title="this除了可以调用成员变量或成员方法之外,还可以作为方法的返回值"></a>this除了可以调用成员变量或成员方法之外,还可以作为方法的返回值</h4><h2 id="类的构造方法"><a href="#类的构造方法" class="headerlink" title="类的构造方法"></a>类的构造方法</h2><h3 id="定义-在类中除了成员方法之外-还存在一种特殊类型的方法-那就是构造方法-是一个与类同名的方法-对象的创建就是通过构造方法完成的-每当类实例化一个对象时-类都会自动调用构造方法"><a href="#定义-在类中除了成员方法之外-还存在一种特殊类型的方法-那就是构造方法-是一个与类同名的方法-对象的创建就是通过构造方法完成的-每当类实例化一个对象时-类都会自动调用构造方法" class="headerlink" title="定义:在类中除了成员方法之外,还存在一种特殊类型的方法,那就是构造方法,是一个与类同名的方法,对象的创建就是通过构造方法完成的.每当类实例化一个对象时,类都会自动调用构造方法"></a>定义:在类中除了成员方法之外,还存在一种特殊类型的方法,那就是构造方法,是一个与类同名的方法,对象的创建就是通过构造方法完成的.每当类实例化一个对象时,类都会自动调用构造方法</h3><h3 id="特点"><a href="#特点" class="headerlink" title="特点:"></a>特点:</h3><h4 id="构造方法没有返回值"><a href="#构造方法没有返回值" class="headerlink" title="构造方法没有返回值"></a>构造方法没有返回值</h4><h4 id="构造方法的名称要与本类的名称相同"><a href="#构造方法的名称要与本类的名称相同" class="headerlink" title="构造方法的名称要与本类的名称相同"></a>构造方法的名称要与本类的名称相同</h4><h4 id="在定义构造方法时，构造方法没有返回值，但这与普通没有返回值的方法不同，普通没有返回值的方法使用public-void-methodEx-这种形式进行定义但构造方法并不需要使用void关键字修饰"><a href="#在定义构造方法时，构造方法没有返回值，但这与普通没有返回值的方法不同，普通没有返回值的方法使用public-void-methodEx-这种形式进行定义但构造方法并不需要使用void关键字修饰" class="headerlink" title="在定义构造方法时，构造方法没有返回值，但这与普通没有返回值的方法不同，普通没有返回值的方法使用public void methodEx()这种形式进行定义但构造方法并不需要使用void关键字修饰"></a>在定义构造方法时，构造方法没有返回值，但这与普通没有返回值的方法不同，普通没有返回值的方法使用public void methodEx()这种形式进行定义但构造方法并不需要使用void关键字修饰</h4><h3 id="在构造方法中可以为成员变量赋值-这样实例化一个本类的对象时-相应的成员变量也将被初始化"><a href="#在构造方法中可以为成员变量赋值-这样实例化一个本类的对象时-相应的成员变量也将被初始化" class="headerlink" title="在构造方法中可以为成员变量赋值,这样实例化一个本类的对象时,相应的成员变量也将被初始化"></a>在构造方法中可以为成员变量赋值,这样实例化一个本类的对象时,相应的成员变量也将被初始化</h3><h3 id="如果类中没有明确定义-系统会默认一个空的构造方法"><a href="#如果类中没有明确定义-系统会默认一个空的构造方法" class="headerlink" title="如果类中没有明确定义,系统会默认一个空的构造方法"></a>如果类中没有明确定义,系统会默认一个空的构造方法</h3><h4 id="如果在类中定义的构造方法都不是无参的构造方法，那么编译器也不会为类设置一个默认的无参构造方法，当试图调用无参构造方法实例化一个对象时，编译器会报错，所以只有在类中没有定义任何构造方法时，编译器才会在该类中自动创建一个不带参数的构造方法"><a href="#如果在类中定义的构造方法都不是无参的构造方法，那么编译器也不会为类设置一个默认的无参构造方法，当试图调用无参构造方法实例化一个对象时，编译器会报错，所以只有在类中没有定义任何构造方法时，编译器才会在该类中自动创建一个不带参数的构造方法" class="headerlink" title="如果在类中定义的构造方法都不是无参的构造方法，那么编译器也不会为类设置一个默认的无参构造方法，当试图调用无参构造方法实例化一个对象时，编译器会报错，所以只有在类中没有定义任何构造方法时，编译器才会在该类中自动创建一个不带参数的构造方法"></a>如果在类中定义的构造方法都不是无参的构造方法，那么编译器也不会为类设置一个默认的无参构造方法，当试图调用无参构造方法实例化一个对象时，编译器会报错，所以只有在类中没有定义任何构造方法时，编译器才会在该类中自动创建一个不带参数的构造方法</h4><h2 id="静态变量、常量和方法"><a href="#静态变量、常量和方法" class="headerlink" title="静态变量、常量和方法"></a>静态变量、常量和方法</h2><h3 id="可以使处理问题时会需要两个类在同一个内存区域共享一个数据"><a href="#可以使处理问题时会需要两个类在同一个内存区域共享一个数据" class="headerlink" title="可以使处理问题时会需要两个类在同一个内存区域共享一个数据"></a>可以使处理问题时会需要两个类在同一个内存区域共享一个数据</h3><h3 id="被声明为static的变量、常量和方法被称为静态成员、静态成员属于类所有，区别于个别对象，可以在本类或其他类使用类名和“-”运算符调用静态成员"><a href="#被声明为static的变量、常量和方法被称为静态成员、静态成员属于类所有，区别于个别对象，可以在本类或其他类使用类名和“-”运算符调用静态成员" class="headerlink" title="被声明为static的变量、常量和方法被称为静态成员、静态成员属于类所有，区别于个别对象，可以在本类或其他类使用类名和“.”运算符调用静态成员"></a>被声明为static的变量、常量和方法被称为静态成员、静态成员属于类所有，区别于个别对象，可以在本类或其他类使用类名和“.”运算符调用静态成员</h3><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><h4 id="类名-静态成员"><a href="#类名-静态成员" class="headerlink" title="类名.静态成员"></a>类名.静态成员</h4><h4 id="可以使用以上这种形式进行调用，但通常不建议用这样的形式，因为这样容易混淆静态成员和非静态成员"><a href="#可以使用以上这种形式进行调用，但通常不建议用这样的形式，因为这样容易混淆静态成员和非静态成员" class="headerlink" title="可以使用以上这种形式进行调用，但通常不建议用这样的形式，因为这样容易混淆静态成员和非静态成员"></a>可以使用以上这种形式进行调用，但通常不建议用这样的形式，因为这样容易混淆静态成员和非静态成员</h4><h3 id="作用-通常是为了提供共享数据或方法，虽然类名-静态成员调用比较方便，但静态成员同样遵循着public-private-protected修饰符的约束"><a href="#作用-通常是为了提供共享数据或方法，虽然类名-静态成员调用比较方便，但静态成员同样遵循着public-private-protected修饰符的约束" class="headerlink" title="作用:通常是为了提供共享数据或方法，虽然类名.静态成员调用比较方便，但静态成员同样遵循着public private protected修饰符的约束"></a>作用:通常是为了提供共享数据或方法，虽然类名.静态成员调用比较方便，但静态成员同样遵循着public private protected修饰符的约束</h3><h3 id="规定"><a href="#规定" class="headerlink" title="规定"></a>规定</h3><h4 id="在静态方法中不能使用this关键字"><a href="#在静态方法中不能使用this关键字" class="headerlink" title="在静态方法中不能使用this关键字"></a>在静态方法中不能使用this关键字</h4><h4 id="在静态方法中不能直接调用非静态方法"><a href="#在静态方法中不能直接调用非静态方法" class="headerlink" title="在静态方法中不能直接调用非静态方法"></a>在静态方法中不能直接调用非静态方法</h4><h4 id="不能将方法体内的局部变量声明为static的"><a href="#不能将方法体内的局部变量声明为static的" class="headerlink" title="不能将方法体内的局部变量声明为static的"></a>不能将方法体内的局部变量声明为static的</h4><h3 id="静态区域"><a href="#静态区域" class="headerlink" title="静态区域"></a>静态区域</h3><h4 id="如果在执行类时，希望先执行类的初始化动作，可以使用static定义一个静态区域。"><a href="#如果在执行类时，希望先执行类的初始化动作，可以使用static定义一个静态区域。" class="headerlink" title="如果在执行类时，希望先执行类的初始化动作，可以使用static定义一个静态区域。"></a>如果在执行类时，希望先执行类的初始化动作，可以使用static定义一个静态区域。</h4><h4 id="当这段代码被执行时，首先执行static块中的程序，并且只会执行一次"><a href="#当这段代码被执行时，首先执行static块中的程序，并且只会执行一次" class="headerlink" title="当这段代码被执行时，首先执行static块中的程序，并且只会执行一次"></a>当这段代码被执行时，首先执行static块中的程序，并且只会执行一次</h4><h2 id="类的主方法"><a href="#类的主方法" class="headerlink" title="类的主方法"></a>类的主方法</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><h4 id="主方法是类的入口点，它定义了程序从何处开始；"><a href="#主方法是类的入口点，它定义了程序从何处开始；" class="headerlink" title="主方法是类的入口点，它定义了程序从何处开始；"></a>主方法是类的入口点，它定义了程序从何处开始；</h4><h4 id="主方法提供对程序流向的控制，Java编译器哦那个过主方法来执行程序"><a href="#主方法提供对程序流向的控制，Java编译器哦那个过主方法来执行程序" class="headerlink" title="主方法提供对程序流向的控制，Java编译器哦那个过主方法来执行程序"></a>主方法提供对程序流向的控制，Java编译器哦那个过主方法来执行程序</h4><h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><h4 id="主方法是静态的，所以如要直接在主方法中调用其他方法，则该方法必须也是静态的。"><a href="#主方法是静态的，所以如要直接在主方法中调用其他方法，则该方法必须也是静态的。" class="headerlink" title="主方法是静态的，所以如要直接在主方法中调用其他方法，则该方法必须也是静态的。"></a>主方法是静态的，所以如要直接在主方法中调用其他方法，则该方法必须也是静态的。</h4><h4 id="主方法没有返回值"><a href="#主方法没有返回值" class="headerlink" title="主方法没有返回值"></a>主方法没有返回值</h4><h4 id="主方法的形参为数组。其中args-0-args-n-分别代表程序的第一个参数到第n个参数，可以使用args-length获取参数的个数。"><a href="#主方法的形参为数组。其中args-0-args-n-分别代表程序的第一个参数到第n个参数，可以使用args-length获取参数的个数。" class="headerlink" title="主方法的形参为数组。其中args[0]~args[n]分别代表程序的第一个参数到第n个参数，可以使用args.length获取参数的个数。"></a>主方法的形参为数组。其中args[0]~args[n]分别代表程序的第一个参数到第n个参数，可以使用args.length获取参数的个数。</h4><h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><h3 id="由类抽象出来的，所有的问题都通过对象来处理"><a href="#由类抽象出来的，所有的问题都通过对象来处理" class="headerlink" title="由类抽象出来的，所有的问题都通过对象来处理"></a>由类抽象出来的，所有的问题都通过对象来处理</h3><h3 id="每个对象都是相互独立的，在内存中占据独立的内存地址，并且每个对象都具有自己的生命周期，当一个对象的生命周期结束时，对象就变成垃圾，由Java虚拟机自带的来及回收机制处理，不能被再被使用"><a href="#每个对象都是相互独立的，在内存中占据独立的内存地址，并且每个对象都具有自己的生命周期，当一个对象的生命周期结束时，对象就变成垃圾，由Java虚拟机自带的来及回收机制处理，不能被再被使用" class="headerlink" title="每个对象都是相互独立的，在内存中占据独立的内存地址，并且每个对象都具有自己的生命周期，当一个对象的生命周期结束时，对象就变成垃圾，由Java虚拟机自带的来及回收机制处理，不能被再被使用"></a>每个对象都是相互独立的，在内存中占据独立的内存地址，并且每个对象都具有自己的生命周期，当一个对象的生命周期结束时，对象就变成垃圾，由Java虚拟机自带的来及回收机制处理，不能被再被使用</h3><h3 id="在Java语言中对象和实例事实上可以通用"><a href="#在Java语言中对象和实例事实上可以通用" class="headerlink" title="在Java语言中对象和实例事实上可以通用"></a>在Java语言中对象和实例事实上可以通用</h3><h3 id="访问对象的属性和行为"><a href="#访问对象的属性和行为" class="headerlink" title="访问对象的属性和行为"></a>访问对象的属性和行为</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransferProperty</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">47</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;调用call()方法&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">3</span>;i++)&#123;</span><br><span class="line">            System.out.println(i+<span class="string">&quot;&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span>(i == <span class="number">2</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TransferProperty</span><span class="params">()</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        TransferProperty t1 = <span class="keyword">new</span> TransferProperty();<span class="comment">//创建一个对象</span></span><br><span class="line">        TransferProperty t2 = <span class="keyword">new</span> TransferProperty();<span class="comment">//创建另一个对象</span></span><br><span class="line">        t2.i = <span class="number">60</span>;<span class="comment">//将类成员变量赋值为60</span></span><br><span class="line">        <span class="comment">//使用第一个对象调用类成员变量</span></span><br><span class="line">        System.out.println(<span class="string">&quot;第一个实例对象调用变量i的结果&quot;</span>+ 他.i++);</span><br><span class="line">        t1.call;<span class="comment">//使用第一个对象调用类成员方法</span></span><br><span class="line">        <span class="comment">//使用第二个对象调用类成员变量</span></span><br><span class="line">        System.out.println(<span class="string">&quot;第二个实例对象调用变量i的结果: &quot;</span>+t2.i);</span><br><span class="line">        t2.call();<span class="comment">//使用第二个对象调用类成员方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用new操作符创建一个对象后，对象-类成员来获取对象的属性行为"><a href="#使用new操作符创建一个对象后，对象-类成员来获取对象的属性行为" class="headerlink" title="使用new操作符创建一个对象后，对象.类成员来获取对象的属性行为"></a>使用new操作符创建一个对象后，对象.类成员来获取对象的属性行为</h4><h3 id="对象的引用"><a href="#对象的引用" class="headerlink" title="对象的引用"></a>对象的引用</h3><h4 id="Book-book-new-Book"><a href="#Book-book-new-Book" class="headerlink" title="Book book = new Book();"></a><code>Book book = new Book();</code></h4><h4 id="引用只是存放一个对象的内存地址，并非存放一个对象，严格地说，引用和对象是不同的，但是可以将这种区别忽略，如可以简单地说book是Book类的一个对象，而事实上应该是book包含Book对象的一个引用。"><a href="#引用只是存放一个对象的内存地址，并非存放一个对象，严格地说，引用和对象是不同的，但是可以将这种区别忽略，如可以简单地说book是Book类的一个对象，而事实上应该是book包含Book对象的一个引用。" class="headerlink" title="引用只是存放一个对象的内存地址，并非存放一个对象，严格地说，引用和对象是不同的，但是可以将这种区别忽略，如可以简单地说book是Book类的一个对象，而事实上应该是book包含Book对象的一个引用。"></a>引用只是存放一个对象的内存地址，并非存放一个对象，严格地说，引用和对象是不同的，但是可以将这种区别忽略，如可以简单地说book是Book类的一个对象，而事实上应该是book包含Book对象的一个引用。</h4><h3 id="对象的比较"><a href="#对象的比较" class="headerlink" title="对象的比较"></a>对象的比较</h3><h4 id="比较两个对象引用的地址是否相等"><a href="#比较两个对象引用的地址是否相等" class="headerlink" title="== : 比较两个对象引用的地址是否相等"></a>== : 比较两个对象引用的地址是否相等</h4><h4 id="equals-方法"><a href="#equals-方法" class="headerlink" title="equals()方法"></a>equals()方法</h4><h5 id="String类中的方法"><a href="#String类中的方法" class="headerlink" title="String类中的方法"></a>String类中的方法</h5><h5 id="用于比较两个对象引用所指的内容是否相等；"><a href="#用于比较两个对象引用所指的内容是否相等；" class="headerlink" title="用于比较两个对象引用所指的内容是否相等；"></a>用于比较两个对象引用所指的内容是否相等；</h5><h3 id="对象的销毁"><a href="#对象的销毁" class="headerlink" title="对象的销毁"></a>对象的销毁</h3><h4 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h4><h5 id="每个对象都有生命周期，当对象的生命周期结束时，分配给该对象的内存地址将会被回收。"><a href="#每个对象都有生命周期，当对象的生命周期结束时，分配给该对象的内存地址将会被回收。" class="headerlink" title="每个对象都有生命周期，当对象的生命周期结束时，分配给该对象的内存地址将会被回收。"></a>每个对象都有生命周期，当对象的生命周期结束时，分配给该对象的内存地址将会被回收。</h5><h5 id="其他语言需要手动回收废弃的对象，但是Java拥有一套完整的垃圾回收机制，用户不必担心对象占用内存，垃圾回收器将回收无用的但占用内存的资源"><a href="#其他语言需要手动回收废弃的对象，但是Java拥有一套完整的垃圾回收机制，用户不必担心对象占用内存，垃圾回收器将回收无用的但占用内存的资源" class="headerlink" title="其他语言需要手动回收废弃的对象，但是Java拥有一套完整的垃圾回收机制，用户不必担心对象占用内存，垃圾回收器将回收无用的但占用内存的资源"></a>其他语言需要手动回收废弃的对象，但是Java拥有一套完整的垃圾回收机制，用户不必担心对象占用内存，垃圾回收器将回收无用的但占用内存的资源</h5><h4 id="垃圾"><a href="#垃圾" class="headerlink" title="垃圾"></a>垃圾</h4><h5 id="对象引用超过其作用范围，这个对象将被视为垃圾"><a href="#对象引用超过其作用范围，这个对象将被视为垃圾" class="headerlink" title="对象引用超过其作用范围，这个对象将被视为垃圾"></a>对象引用超过其作用范围，这个对象将被视为垃圾</h5><h5 id="将对象赋值给null"><a href="#将对象赋值给null" class="headerlink" title="将对象赋值给null"></a>将对象赋值给null</h5><h4 id="垃圾回收机制"><a href="#垃圾回收机制" class="headerlink" title="垃圾回收机制"></a>垃圾回收机制</h4><h5 id="很完善"><a href="#很完善" class="headerlink" title="很完善"></a>很完善</h5><h5 id="但是只能回收那些由new操作符创建的对象，"><a href="#但是只能回收那些由new操作符创建的对象，" class="headerlink" title="但是只能回收那些由new操作符创建的对象，"></a>但是只能回收那些由new操作符创建的对象，</h5><h5 id="如果某些对象不能通过new操作符在内存中获取一块内存区域，这种对象可能不能被垃圾回收机制所识别，所以在java中提供了一个finalize-方法"><a href="#如果某些对象不能通过new操作符在内存中获取一块内存区域，这种对象可能不能被垃圾回收机制所识别，所以在java中提供了一个finalize-方法" class="headerlink" title="如果某些对象不能通过new操作符在内存中获取一块内存区域，这种对象可能不能被垃圾回收机制所识别，所以在java中提供了一个finalize()方法"></a>如果某些对象不能通过new操作符在内存中获取一块内存区域，这种对象可能不能被垃圾回收机制所识别，所以在java中提供了一个finalize()方法</h5><h4 id="finalize-方法"><a href="#finalize-方法" class="headerlink" title="finalize()方法"></a>finalize()方法</h4><h5 id="是Object类的方法，被声明为protected，用户可以在自己的类中定义这个方法"><a href="#是Object类的方法，被声明为protected，用户可以在自己的类中定义这个方法" class="headerlink" title="是Object类的方法，被声明为protected，用户可以在自己的类中定义这个方法"></a>是Object类的方法，被声明为protected，用户可以在自己的类中定义这个方法</h5><h5 id="如果用户在类中定义了finalized方法，在垃圾回收时会首先调用该方法，在下一次垃圾回收动作发生时，才能真正回收被对象占用的内存。"><a href="#如果用户在类中定义了finalized方法，在垃圾回收时会首先调用该方法，在下一次垃圾回收动作发生时，才能真正回收被对象占用的内存。" class="headerlink" title="如果用户在类中定义了finalized方法，在垃圾回收时会首先调用该方法，在下一次垃圾回收动作发生时，才能真正回收被对象占用的内存。"></a>如果用户在类中定义了finalized方法，在垃圾回收时会首先调用该方法，在下一次垃圾回收动作发生时，才能真正回收被对象占用的内存。</h5><h4 id="有一点需要明确的是，垃圾回收或finalized方法不保证一定会发生，如Java虚拟机内存损耗待尽时，它是不会执行垃圾回收的。"><a href="#有一点需要明确的是，垃圾回收或finalized方法不保证一定会发生，如Java虚拟机内存损耗待尽时，它是不会执行垃圾回收的。" class="headerlink" title="有一点需要明确的是，垃圾回收或finalized方法不保证一定会发生，如Java虚拟机内存损耗待尽时，它是不会执行垃圾回收的。"></a>有一点需要明确的是，垃圾回收或finalized方法不保证一定会发生，如Java虚拟机内存损耗待尽时，它是不会执行垃圾回收的。</h4><h4 id="由于垃圾回收不受人为控制，具体执行时间也不确定，所以finalized方法也就无法执行，"><a href="#由于垃圾回收不受人为控制，具体执行时间也不确定，所以finalized方法也就无法执行，" class="headerlink" title="由于垃圾回收不受人为控制，具体执行时间也不确定，所以finalized方法也就无法执行，"></a>由于垃圾回收不受人为控制，具体执行时间也不确定，所以finalized方法也就无法执行，</h4><h5 id="为此，Java提供了System-gc-方法强制启动垃圾回收器。"><a href="#为此，Java提供了System-gc-方法强制启动垃圾回收器。" class="headerlink" title="为此，Java提供了System.gc()方法强制启动垃圾回收器。"></a>为此，Java提供了System.gc()方法强制启动垃圾回收器。</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//尝试编写一个类,定义一个修饰权限为private的成员变量,并定义两个成员方法,一个成语方法实现为此成员变量赋值,另一个成员方法获取这个成员变量的值,保证其他类继承该类时能获取该类的成员变量的值</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">exercise</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> x;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">exercise</span><span class="params">(<span class="keyword">int</span> tp)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.x = tp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getValue</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        exercise exer = <span class="keyword">new</span> exercise(<span class="number">10</span>);</span><br><span class="line">        System.out.println(x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//尝试编写一个矩形类,将长与款作为矩形类的属性,在构造方法中将长.宽初始化,定义一个成员方法求此矩形的面积</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">rect</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> length;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> width;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">rect</span><span class="params">(<span class="keyword">double</span> le,<span class="keyword">double</span> wi)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.length = le;</span><br><span class="line">        <span class="keyword">this</span>.width = wi;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">double</span> <span class="title">area</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">this</span>.length)*(<span class="keyword">this</span>.width);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        rect re = <span class="keyword">new</span> rect(<span class="number">2.3</span>,<span class="number">2.3</span>);</span><br><span class="line">        System.out.println(re.area());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//根据运行参数的个数决定循环打印变量i值的次数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;args.length;i++)&#123;</span><br><span class="line">        System.out.println(i);p</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/java/">java</category>
      
      
      <category domain="http://example.com/tags/%E5%AF%BC%E8%88%AA/">导航</category>
      
      <category domain="http://example.com/tags/%E5%88%86%E4%BA%AB/">分享</category>
      
      
      <comments>http://example.com/2021/06/13/java%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Java数组</title>
      <link>http://example.com/2021/06/12/Java%E6%95%B0%E7%BB%84/</link>
      <guid>http://example.com/2021/06/12/Java%E6%95%B0%E7%BB%84/</guid>
      <pubDate>Sat, 12 Jun 2021 13:16:48 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;数组&quot;&gt;&lt;a href=&quot;#数组&quot; class=&quot;headerlink&quot; title=&quot;数组&quot;&gt;&lt;/a&gt;数组&lt;/h1&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><span id="more"></span><h2 id="一维数组的创建并使用"><a href="#一维数组的创建并使用" class="headerlink" title="一维数组的创建并使用"></a>一维数组的创建并使用</h2><h3 id="一维数组实质上是一组相同数据类型的线性集合-当在程序中需要处理一组数据-或者传递一组数据时-可以应用这种类型的数组"><a href="#一维数组实质上是一组相同数据类型的线性集合-当在程序中需要处理一组数据-或者传递一组数据时-可以应用这种类型的数组" class="headerlink" title="一维数组实质上是一组相同数据类型的线性集合,当在程序中需要处理一组数据,或者传递一组数据时,可以应用这种类型的数组."></a>一维数组实质上是一组相同数据类型的线性集合,当在程序中需要处理一组数据,或者传递一组数据时,可以应用这种类型的数组.</h3><h3 id="创建一维数组"><a href="#创建一维数组" class="headerlink" title="创建一维数组"></a>创建一维数组</h3><h4 id="数组作为对象允许使用new关键字进行内存分配"><a href="#数组作为对象允许使用new关键字进行内存分配" class="headerlink" title="数组作为对象允许使用new关键字进行内存分配."></a>数组作为对象允许使用new关键字进行内存分配.</h4><h4 id="使用数组之前-必须首先定义数组变量所属的类型"><a href="#使用数组之前-必须首先定义数组变量所属的类型" class="headerlink" title="使用数组之前,必须首先定义数组变量所属的类型."></a>使用数组之前,必须首先定义数组变量所属的类型.</h4><h4 id="一维数组的创建"><a href="#一维数组的创建" class="headerlink" title="一维数组的创建"></a>一维数组的创建</h4><h5 id="类型-数组名-类型-数组名"><a href="#类型-数组名-类型-数组名" class="headerlink" title="类型 数组名[]; 类型[] 数组名;"></a>类型 数组名[]; 类型[] 数组名;</h5><h5 id="数组名字-new-数组元素的类型-数组元素的个数"><a href="#数组名字-new-数组元素的类型-数组元素的个数" class="headerlink" title="数组名字 = new 数组元素的类型[数组元素的个数]"></a>数组名字 = new 数组元素的类型[数组元素的个数]</h5><h5 id="使用new关键字为数组分配内存时，整型数组中各个元素的初始值都为0"><a href="#使用new关键字为数组分配内存时，整型数组中各个元素的初始值都为0" class="headerlink" title="使用new关键字为数组分配内存时，整型数组中各个元素的初始值都为0"></a>使用new关键字为数组分配内存时，整型数组中各个元素的初始值都为0</h5><h5 id="数组元素的类型-数组名-new-数组元素的类型-数组元素的个数"><a href="#数组元素的类型-数组名-new-数组元素的类型-数组元素的个数" class="headerlink" title="数组元素的类型 数组名 = new 数组元素的类型[数组元素的个数];"></a>数组元素的类型 数组名 = new 数组元素的类型[数组元素的个数];</h5><h6 id="这种i创建数组的方法是将数组的声明和内存的分配合在一起执行"><a href="#这种i创建数组的方法是将数组的声明和内存的分配合在一起执行" class="headerlink" title="这种i创建数组的方法是将数组的声明和内存的分配合在一起执行"></a>这种i创建数组的方法是将数组的声明和内存的分配合在一起执行</h6><h3 id="初始化一维数组"><a href="#初始化一维数组" class="headerlink" title="初始化一维数组"></a>初始化一维数组</h3><h4 id="int-arr-new-int-1-2-3-4-5"><a href="#int-arr-new-int-1-2-3-4-5" class="headerlink" title="int arr[] = new int[1,2,3,4,5];"></a><code>int arr[] = new int[1,2,3,4,5];</code></h4><h4 id="int-arr-1-2-3-4-5"><a href="#int-arr-1-2-3-4-5" class="headerlink" title="int arr[] = {1,2,3,4,5};"></a><code>int arr[] = &#123;1,2,3,4,5&#125;;</code></h4><h3 id="二维数组的创建及使用"><a href="#二维数组的创建及使用" class="headerlink" title="二维数组的创建及使用"></a>二维数组的创建及使用</h3><h4 id="如果一维数组中的各个元素仍然是一个数组-那么它就是一个二维数组-二维数组常用于表示表-表中的信息以行和列的形式组织-第一个下标时行-第二个是列"><a href="#如果一维数组中的各个元素仍然是一个数组-那么它就是一个二维数组-二维数组常用于表示表-表中的信息以行和列的形式组织-第一个下标时行-第二个是列" class="headerlink" title="如果一维数组中的各个元素仍然是一个数组,那么它就是一个二维数组.二维数组常用于表示表,表中的信息以行和列的形式组织,第一个下标时行,第二个是列"></a>如果一维数组中的各个元素仍然是一个数组,那么它就是一个二维数组.二维数组常用于表示表,表中的信息以行和列的形式组织,第一个下标时行,第二个是列</h4><h4 id="二维数组的创建"><a href="#二维数组的创建" class="headerlink" title="二维数组的创建"></a>二维数组的创建</h4><h5 id="基本与一维数组创建方式差不多"><a href="#基本与一维数组创建方式差不多" class="headerlink" title="基本与一维数组创建方式差不多"></a>基本与一维数组创建方式差不多</h5><h5 id="声明的同时为数组分配内存"><a href="#声明的同时为数组分配内存" class="headerlink" title="声明的同时为数组分配内存"></a>声明的同时为数组分配内存</h5><h5 id="使用这种方式为数组分配内存时-首先指定最左边维数的内存-然后单独地给余下的维数分配内存"><a href="#使用这种方式为数组分配内存时-首先指定最左边维数的内存-然后单独地给余下的维数分配内存" class="headerlink" title="使用这种方式为数组分配内存时,首先指定最左边维数的内存,然后单独地给余下的维数分配内存."></a>使用这种方式为数组分配内存时,首先指定最左边维数的内存,然后单独地给余下的维数分配内存.</h5><h3 id="二维数组的初始化"><a href="#二维数组的初始化" class="headerlink" title="二维数组的初始化"></a>二维数组的初始化</h3><h4 id="基本与一维数组相同"><a href="#基本与一维数组相同" class="headerlink" title="基本与一维数组相同"></a>基本与一维数组相同</h4><h4 id="对于整型二维数组-创建成功之后系统会赋给数组中每个元素初始值为0"><a href="#对于整型二维数组-创建成功之后系统会赋给数组中每个元素初始值为0" class="headerlink" title="对于整型二维数组,创建成功之后系统会赋给数组中每个元素初始值为0"></a>对于整型二维数组,创建成功之后系统会赋给数组中每个元素初始值为0</h4><h2 id="数组的基本操作"><a href="#数组的基本操作" class="headerlink" title="数组的基本操作"></a>数组的基本操作</h2><h3 id="java-util包的Arrays类包含了用来操作数组-如排序和搜索-的各种方法"><a href="#java-util包的Arrays类包含了用来操作数组-如排序和搜索-的各种方法" class="headerlink" title="java.util包的Arrays类包含了用来操作数组(如排序和搜索)的各种方法."></a>java.util包的Arrays类包含了用来操作数组(如排序和搜索)的各种方法.</h3><h3 id="遍历数组"><a href="#遍历数组" class="headerlink" title="遍历数组"></a>遍历数组</h3><h4 id="遍历数组就是获取数组中每个元素-通常遍历数组都是使用for循环来实现"><a href="#遍历数组就是获取数组中每个元素-通常遍历数组都是使用for循环来实现" class="headerlink" title="遍历数组就是获取数组中每个元素.通常遍历数组都是使用for循环来实现."></a>遍历数组就是获取数组中每个元素.通常遍历数组都是使用for循环来实现.</h4><h4 id="遍历二维数组需要用到双层for循环-通过数组的length属性可获得数组的长度"><a href="#遍历二维数组需要用到双层for循环-通过数组的length属性可获得数组的长度" class="headerlink" title="遍历二维数组需要用到双层for循环,通过数组的length属性可获得数组的长度"></a>遍历二维数组需要用到双层for循环,通过数组的length属性可获得数组的长度</h4><h4 id="遍历数组时使用foreach语句可能会更简单"><a href="#遍历数组时使用foreach语句可能会更简单" class="headerlink" title="遍历数组时使用foreach语句可能会更简单"></a>遍历数组时使用foreach语句可能会更简单</h4><h3 id="填充替换数组元素"><a href="#填充替换数组元素" class="headerlink" title="填充替换数组元素"></a>填充替换数组元素</h3><h4 id="数组中的元素定义完成后-可以通过Arrays类的静态方法fill-来对数组中的元素进行替换"><a href="#数组中的元素定义完成后-可以通过Arrays类的静态方法fill-来对数组中的元素进行替换" class="headerlink" title="数组中的元素定义完成后,可以通过Arrays类的静态方法fill()来对数组中的元素进行替换."></a>数组中的元素定义完成后,可以通过Arrays类的静态方法fill()来对数组中的元素进行替换.</h4><h4 id="该方法通过各种重载形式可完成对任意类型的数组元素的替换"><a href="#该方法通过各种重载形式可完成对任意类型的数组元素的替换" class="headerlink" title="该方法通过各种重载形式可完成对任意类型的数组元素的替换"></a>该方法通过各种重载形式可完成对任意类型的数组元素的替换</h4><h4 id="fill-int-a-int-value"><a href="#fill-int-a-int-value" class="headerlink" title="fill(int[] a,int value);"></a><code>fill(int[] a,int value);</code></h4><h5 id="该方法可将指定的int值分配给int型数组的每个元素"><a href="#该方法可将指定的int值分配给int型数组的每个元素" class="headerlink" title="该方法可将指定的int值分配给int型数组的每个元素"></a>该方法可将指定的int值分配给int型数组的每个元素</h5><h4 id="fill-int-a-int-fromIndex-int-toIndex-int-value"><a href="#fill-int-a-int-fromIndex-int-toIndex-int-value" class="headerlink" title="fill(int[] a,int fromIndex,int toIndex,int value);"></a><code>fill(int[] a,int fromIndex,int toIndex,int value);</code></h4><h5 id="a-要填充的数组"><a href="#a-要填充的数组" class="headerlink" title="a:要填充的数组"></a>a:要填充的数组</h5><h5 id="fromIndex-要使用指定值填充的第一个元素的索引-包括"><a href="#fromIndex-要使用指定值填充的第一个元素的索引-包括" class="headerlink" title="fromIndex:要使用指定值填充的第一个元素的索引(包括)"></a>fromIndex:要使用指定值填充的第一个元素的索引(包括)</h5><h5 id="toIndex-要使用指定值填充的最后一个元素的索引-不包括"><a href="#toIndex-要使用指定值填充的最后一个元素的索引-不包括" class="headerlink" title="toIndex:要使用指定值填充的最后一个元素的索引(不包括)"></a>toIndex:要使用指定值填充的最后一个元素的索引(不包括)</h5><h5 id="value-要储存的所有的元素的值"><a href="#value-要储存的所有的元素的值" class="headerlink" title="value:要储存的所有的元素的值"></a>value:要储存的所有的元素的值</h5><h5 id="该方法将指定的int值分配给int型数组指定范围中的每个元素。填充的范围从索引fromIndex-包括）一直到索引toIndex（不包括）。如果fromIndex-toIndex-则填充范围为空"><a href="#该方法将指定的int值分配给int型数组指定范围中的每个元素。填充的范围从索引fromIndex-包括）一直到索引toIndex（不包括）。如果fromIndex-toIndex-则填充范围为空" class="headerlink" title="该方法将指定的int值分配给int型数组指定范围中的每个元素。填充的范围从索引fromIndex(包括）一直到索引toIndex（不包括）。如果fromIndex==toIndex,则填充范围为空"></a>该方法将指定的int值分配给int型数组指定范围中的每个元素。填充的范围从索引fromIndex(包括）一直到索引toIndex（不包括）。如果fromIndex==toIndex,则填充范围为空</h5><h5 id="如果指定的索引位置大于或等于要进行填充的数组的长度，则会报出ArrayIndexOutOf-BoundsException-数组越界异常）异常。"><a href="#如果指定的索引位置大于或等于要进行填充的数组的长度，则会报出ArrayIndexOutOf-BoundsException-数组越界异常）异常。" class="headerlink" title="如果指定的索引位置大于或等于要进行填充的数组的长度，则会报出ArrayIndexOutOf,BoundsException(数组越界异常）异常。"></a>如果指定的索引位置大于或等于要进行填充的数组的长度，则会报出ArrayIndexOutOf,BoundsException(数组越界异常）异常。</h5><h3 id="对数组进行排序"><a href="#对数组进行排序" class="headerlink" title="对数组进行排序"></a>对数组进行排序</h3><h4 id="通过Arrays类的静态方法sort-方法可以实现对数组的排序"><a href="#通过Arrays类的静态方法sort-方法可以实现对数组的排序" class="headerlink" title="通过Arrays类的静态方法sort()方法可以实现对数组的排序."></a>通过Arrays类的静态方法sort()方法可以实现对数组的排序.</h4><h4 id="sort-方法提供了多种重载形式-可对任意类型的数组进行升序排序"><a href="#sort-方法提供了多种重载形式-可对任意类型的数组进行升序排序" class="headerlink" title="sort()方法提供了多种重载形式,可对任意类型的数组进行升序排序"></a>sort()方法提供了多种重载形式,可对任意类型的数组进行升序排序</h4><h5 id="Java中的String类型数组的排序算法是根据字典编排顺序排序的-因此数字排在字母的前面-大写字母排在小写字母的前面"><a href="#Java中的String类型数组的排序算法是根据字典编排顺序排序的-因此数字排在字母的前面-大写字母排在小写字母的前面" class="headerlink" title="Java中的String类型数组的排序算法是根据字典编排顺序排序的,因此数字排在字母的前面,大写字母排在小写字母的前面."></a>Java中的String类型数组的排序算法是根据字典编排顺序排序的,因此数字排在字母的前面,大写字母排在小写字母的前面.</h5><h3 id="复制数组"><a href="#复制数组" class="headerlink" title="复制数组"></a>复制数组</h3><h4 id="Arrays类的copyOf-方法与copyOfRange-方法可以实现对数组的复制"><a href="#Arrays类的copyOf-方法与copyOfRange-方法可以实现对数组的复制" class="headerlink" title="Arrays类的copyOf()方法与copyOfRange()方法可以实现对数组的复制."></a>Arrays类的copyOf()方法与copyOfRange()方法可以实现对数组的复制.</h4><h4 id="copyOf-方法"><a href="#copyOf-方法" class="headerlink" title="copyOf()方法"></a>copyOf()方法</h4><h5 id="复制数组至指定长度"><a href="#复制数组至指定长度" class="headerlink" title="复制数组至指定长度."></a>复制数组至指定长度.</h5><h5 id="提供了多种重载形式-用于满足不同类型数组的复制"><a href="#提供了多种重载形式-用于满足不同类型数组的复制" class="headerlink" title="提供了多种重载形式,用于满足不同类型数组的复制"></a>提供了多种重载形式,用于满足不同类型数组的复制</h5><h4 id="copyOfRange-方法"><a href="#copyOfRange-方法" class="headerlink" title="copyOfRange()方法"></a>copyOfRange()方法</h4><h5 id="将指定数组的指定长度复制到一个新数组中"><a href="#将指定数组的指定长度复制到一个新数组中" class="headerlink" title="将指定数组的指定长度复制到一个新数组中"></a>将指定数组的指定长度复制到一个新数组中</h5><h5 id="同样提供了多种重载形式"><a href="#同样提供了多种重载形式" class="headerlink" title="同样提供了多种重载形式"></a>同样提供了多种重载形式</h5><h5 id="copyOfRange-arr-iint-fromIndex-int-toIndex"><a href="#copyOfRange-arr-iint-fromIndex-int-toIndex" class="headerlink" title="copyOfRange(arr,iint fromIndex,int toIndex)"></a><code>copyOfRange(arr,iint fromIndex,int toIndex)</code></h5><h6 id="arr-要进行复制的数组对象"><a href="#arr-要进行复制的数组对象" class="headerlink" title="arr:要进行复制的数组对象"></a>arr:要进行复制的数组对象</h6><h6 id="formIndex-指定开始复制数组的索引位置-formIndex必须在0至整个数组的长度之间-新数组包括索引是formIndex的元素"><a href="#formIndex-指定开始复制数组的索引位置-formIndex必须在0至整个数组的长度之间-新数组包括索引是formIndex的元素" class="headerlink" title="formIndex:指定开始复制数组的索引位置.formIndex必须在0至整个数组的长度之间.新数组包括索引是formIndex的元素"></a>formIndex:指定开始复制数组的索引位置.formIndex必须在0至整个数组的长度之间.新数组包括索引是formIndex的元素</h6><h6 id="toIndex-要复制范围的最后索引位置-可大于数组arr的长度-新数组不包含索引是toIndex的元素"><a href="#toIndex-要复制范围的最后索引位置-可大于数组arr的长度-新数组不包含索引是toIndex的元素" class="headerlink" title="toIndex:要复制范围的最后索引位置.可大于数组arr的长度.新数组不包含索引是toIndex的元素."></a>toIndex:要复制范围的最后索引位置.可大于数组arr的长度.新数组不包含索引是toIndex的元素.</h6><h3 id="数组查询"><a href="#数组查询" class="headerlink" title="数组查询"></a>数组查询</h3><h4 id="Arrays类的binarySearch-方法"><a href="#Arrays类的binarySearch-方法" class="headerlink" title="Arrays类的binarySearch()方法,"></a>Arrays类的binarySearch()方法,</h4><h4 id="该方法可使用二分搜索法来搜索指定数组，以获得指定对象。该方法返回要搜索元素的索引值。"><a href="#该方法可使用二分搜索法来搜索指定数组，以获得指定对象。该方法返回要搜索元素的索引值。" class="headerlink" title="该方法可使用二分搜索法来搜索指定数组，以获得指定对象。该方法返回要搜索元素的索引值。"></a>该方法可使用二分搜索法来搜索指定数组，以获得指定对象。该方法返回要搜索元素的索引值。</h4><h4 id="提供了多种重载形式-用于满足各种类型数组的查找需要"><a href="#提供了多种重载形式-用于满足各种类型数组的查找需要" class="headerlink" title="提供了多种重载形式,用于满足各种类型数组的查找需要."></a>提供了多种重载形式,用于满足各种类型数组的查找需要.</h4><h4 id="必须在进行此调用之前对数组进行排序（通过sort-方法）。如果没有对数组进行排序，则结果是不确定的，如果数组包含多个带有指定值的元素，则无法保证找到的是哪一个。"><a href="#必须在进行此调用之前对数组进行排序（通过sort-方法）。如果没有对数组进行排序，则结果是不确定的，如果数组包含多个带有指定值的元素，则无法保证找到的是哪一个。" class="headerlink" title="必须在进行此调用之前对数组进行排序（通过sort()方法）。如果没有对数组进行排序，则结果是不确定的，如果数组包含多个带有指定值的元素，则无法保证找到的是哪一个。"></a>必须在进行此调用之前对数组进行排序（通过sort()方法）。如果没有对数组进行排序，则结果是不确定的，如果数组包含多个带有指定值的元素，则无法保证找到的是哪一个。</h4><h4 id="有两种参数类型"><a href="#有两种参数类型" class="headerlink" title="有两种参数类型"></a>有两种参数类型</h4><h5 id="binarySearch-Object-Object-key"><a href="#binarySearch-Object-Object-key" class="headerlink" title="binarySearch(Object[].Object key);"></a><code>binarySearch(Object[].Object key);</code></h5><h6 id="如果key包含在数组中-则返回搜索值的索引-否则返回-1或”-“-插入点-插入点是搜索键将要插入数组的那一点-即第一个大于此键的元素索引"><a href="#如果key包含在数组中-则返回搜索值的索引-否则返回-1或”-“-插入点-插入点是搜索键将要插入数组的那一点-即第一个大于此键的元素索引" class="headerlink" title="如果key包含在数组中,则返回搜索值的索引;否则返回-1或”-“(插入点).插入点是搜索键将要插入数组的那一点,即第一个大于此键的元素索引."></a>如果key包含在数组中,则返回搜索值的索引;否则返回-1或”-“(插入点).插入点是搜索键将要插入数组的那一点,即第一个大于此键的元素索引.</h6><h6 id="如果数组中的所有元素都小于指定的键-则为a-length-注意-这保证了当且仅当此键被找到时-返回的值将大于等于零"><a href="#如果数组中的所有元素都小于指定的键-则为a-length-注意-这保证了当且仅当此键被找到时-返回的值将大于等于零" class="headerlink" title="如果数组中的所有元素都小于指定的键,则为a.length(注意,这保证了当且仅当此键被找到时,返回的值将大于等于零)"></a>如果数组中的所有元素都小于指定的键,则为a.length(注意,这保证了当且仅当此键被找到时,返回的值将大于等于零)</h6><h5 id="binarySearch-Object-int-formIndex-int-toIndex-Object-key"><a href="#binarySearch-Object-int-formIndex-int-toIndex-Object-key" class="headerlink" title="binarySearch(Object[],int formIndex,int toIndex,Object key);"></a><code>binarySearch(Object[],int formIndex,int toIndex,Object key);</code></h5><h6 id="该方法在指定的范围内检索某一元素"><a href="#该方法在指定的范围内检索某一元素" class="headerlink" title="该方法在指定的范围内检索某一元素"></a>该方法在指定的范围内检索某一元素</h6><h6 id="如果数组中的所有元素都小于指定的键-则为toIndex-注意-这保证了当且仅当此键被找到时-返回的值将大于等于零"><a href="#如果数组中的所有元素都小于指定的键-则为toIndex-注意-这保证了当且仅当此键被找到时-返回的值将大于等于零" class="headerlink" title="如果数组中的所有元素都小于指定的键,则为toIndex(注意,这保证了当且仅当此键被找到时,返回的值将大于等于零)"></a>如果数组中的所有元素都小于指定的键,则为toIndex(注意,这保证了当且仅当此键被找到时,返回的值将大于等于零)</h6><h6 id="如果指定的范围大于或等于数组的长度-则会爆出ArraysIndexOutOfBoundsExceptiom异常"><a href="#如果指定的范围大于或等于数组的长度-则会爆出ArraysIndexOutOfBoundsExceptiom异常" class="headerlink" title="如果指定的范围大于或等于数组的长度,则会爆出ArraysIndexOutOfBoundsExceptiom异常"></a>如果指定的范围大于或等于数组的长度,则会爆出ArraysIndexOutOfBoundsExceptiom异常</h6><h2 id="数组排序算法"><a href="#数组排序算法" class="headerlink" title="数组排序算法"></a>数组排序算法</h2><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><h4 id="定义-冒泡排序是最常用的数组排序算法之一-它排序数组元素的过程总是将小数往前放-大数往后放"><a href="#定义-冒泡排序是最常用的数组排序算法之一-它排序数组元素的过程总是将小数往前放-大数往后放" class="headerlink" title="定义:冒泡排序是最常用的数组排序算法之一,它排序数组元素的过程总是将小数往前放,大数往后放,"></a>定义:冒泡排序是最常用的数组排序算法之一,它排序数组元素的过程总是将小数往前放,大数往后放,</h4><h4 id="基本思想-冒泡排序的基本思想是对比相邻的元素值-如果满足条件就交换元素值-把较小的元素移动到数组前面-把大的元素移动到数组的后面-也就是交换两个元素的位置-这样较小的元素就像旗袍一样从底部往上升"><a href="#基本思想-冒泡排序的基本思想是对比相邻的元素值-如果满足条件就交换元素值-把较小的元素移动到数组前面-把大的元素移动到数组的后面-也就是交换两个元素的位置-这样较小的元素就像旗袍一样从底部往上升" class="headerlink" title="基本思想:冒泡排序的基本思想是对比相邻的元素值,如果满足条件就交换元素值,把较小的元素移动到数组前面,把大的元素移动到数组的后面(也就是交换两个元素的位置),这样较小的元素就像旗袍一样从底部往上升."></a>基本思想:冒泡排序的基本思想是对比相邻的元素值,如果满足条件就交换元素值,把较小的元素移动到数组前面,把大的元素移动到数组的后面(也就是交换两个元素的位置),这样较小的元素就像旗袍一样从底部往上升.</h4><h5 id="通常使用双层循环实现"><a href="#通常使用双层循环实现" class="headerlink" title="通常使用双层循环实现"></a>通常使用双层循环实现</h5><h6 id="外层循环-用于控制排序轮数-一般为要排序的数组长度减1次-因为最后只剩下一个数组元素-不需要对比-同时数组已经完成排序了"><a href="#外层循环-用于控制排序轮数-一般为要排序的数组长度减1次-因为最后只剩下一个数组元素-不需要对比-同时数组已经完成排序了" class="headerlink" title="外层循环:用于控制排序轮数,一般为要排序的数组长度减1次,因为最后只剩下一个数组元素,不需要对比,同时数组已经完成排序了."></a>外层循环:用于控制排序轮数,一般为要排序的数组长度减1次,因为最后只剩下一个数组元素,不需要对比,同时数组已经完成排序了.</h6><h6 id="内层循环-用于对比数组中每个临近元素的大小-以确定是否交换位置-对比和交换次数随排序的轮数而减少"><a href="#内层循环-用于对比数组中每个临近元素的大小-以确定是否交换位置-对比和交换次数随排序的轮数而减少" class="headerlink" title="内层循环:用于对比数组中每个临近元素的大小,以确定是否交换位置,对比和交换次数随排序的轮数而减少."></a>内层循环:用于对比数组中每个临近元素的大小,以确定是否交换位置,对比和交换次数随排序的轮数而减少.</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BubbleSort</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="comment">//创建一个数组,这个数组元素是乱序的</span></span><br><span class="line"><span class="keyword">int</span>[] array = &#123;<span class="number">63</span>,<span class="number">65</span>,<span class="number">7</span>,<span class="number">13</span>,<span class="number">55</span>,<span class="number">100</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="comment">//创建冒泡排序类的对象</span></span><br><span class="line">BubbleSort sorter = <span class="keyword">new</span> BubbleSort();</span><br><span class="line"><span class="comment">//调用排序方法将数组排序</span></span><br><span class="line">sorter.sort(array);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] array)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt; array.length;i++)&#123;</span><br><span class="line"><span class="comment">//比较相邻两个元素,较大的数往后冒泡</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j &lt; array.length;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(array[j] &gt; array[j + <span class="number">1</span>])&#123;</span><br><span class="line"><span class="keyword">int</span> temp = array[j];<span class="comment">//把第一个元素值保存到临时变量中</span></span><br><span class="line">array[j] = array[j + <span class="number">1</span>];<span class="comment">//把第二个元素值保存到第一个元素单元中</span></span><br><span class="line">array[j + <span class="number">1</span>] = temp;<span class="comment">//把临时变量(也就是第一个元素原值)保存到第二个元素中</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">showArray(array);<span class="comment">//输出冒泡排序后的数据元素</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showArray</span><span class="params">(<span class="keyword">int</span>[] array)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i : array)&#123;<span class="comment">//遍历数组</span></span><br><span class="line">System.out.print(<span class="string">&quot;&gt;&quot;</span> + <span class="number">1</span>);<span class="comment">//输出每个数组元素值</span></span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="直接选择排序"><a href="#直接选择排序" class="headerlink" title="直接选择排序"></a>直接选择排序</h3><h4 id="定义-属于选择排序的一种-它的排序速度要比冒泡快一些-因为交换次数少-也是常用的排序算法"><a href="#定义-属于选择排序的一种-它的排序速度要比冒泡快一些-因为交换次数少-也是常用的排序算法" class="headerlink" title="定义:属于选择排序的一种,它的排序速度要比冒泡快一些,,因为交换次数少,也是常用的排序算法"></a>定义:属于选择排序的一种,它的排序速度要比冒泡快一些,,因为交换次数少,也是常用的排序算法</h4><h4 id="基本思想"><a href="#基本思想" class="headerlink" title="基本思想"></a>基本思想</h4><h5 id="将指定排序位置与其他数组元素分别进行对比-如果满足条件就交换元素值-注意这里区别冒泡排序-不是交换相邻元素-而是把满足条件的元素与指定的排序位置交换-如从最后一个元素开始排序"><a href="#将指定排序位置与其他数组元素分别进行对比-如果满足条件就交换元素值-注意这里区别冒泡排序-不是交换相邻元素-而是把满足条件的元素与指定的排序位置交换-如从最后一个元素开始排序" class="headerlink" title="将指定排序位置与其他数组元素分别进行对比,如果满足条件就交换元素值,注意这里区别冒泡排序,不是交换相邻元素,而是把满足条件的元素与指定的排序位置交换(如从最后一个元素开始排序)."></a>将指定排序位置与其他数组元素分别进行对比,如果满足条件就交换元素值,注意这里区别冒泡排序,不是交换相邻元素,而是把满足条件的元素与指定的排序位置交换(如从最后一个元素开始排序).</h5><h5 id="每一趟从待排序的数据元素中选出最大或最小-顺序地放在已排好序的数列的最后-直到全部待排序的数据元素排完"><a href="#每一趟从待排序的数据元素中选出最大或最小-顺序地放在已排好序的数列的最后-直到全部待排序的数据元素排完" class="headerlink" title="每一趟从待排序的数据元素中选出最大或最小,顺序地放在已排好序的数列的最后,直到全部待排序的数据元素排完."></a>每一趟从待排序的数据元素中选出最大或最小,顺序地放在已排好序的数列的最后,直到全部待排序的数据元素排完.</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SelectSort</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="comment">//创建一个数组,这个数组的元素是乱序的</span></span><br><span class="line"><span class="keyword">int</span>[] array = &#123;<span class="number">1</span>,<span class="number">64</span>,<span class="number">78</span>,<span class="number">34</span>,<span class="number">22</span>,<span class="number">100</span>&#125;;</span><br><span class="line"><span class="comment">//创建直接排序类的对象</span></span><br><span class="line">SelectSort sorter = <span class="keyword">new</span> SelectSort&#123;&#125;;</span><br><span class="line"><span class="comment">//调用排序对象的方法将数组排序</span></span><br><span class="line">sorter.sort(array);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] array)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> index;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt; array.length;i++)&#123;</span><br><span class="line">index = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt; array.length;i++)&#123;</span><br><span class="line">index = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j &lt;= array.length - i;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(array[j] &gt; array[index])&#123;</span><br><span class="line">index = j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//交换在位置Array.length - i和index(最大值)上的两个数</span></span><br><span class="line"><span class="keyword">int</span> temp = array[array.length - i];<span class="comment">//把第一个元素值保存到临时变量中</span></span><br><span class="line">array[array.length - i] = array[index];<span class="comment">//把第二个元素值保存到第一个元素单位中</span></span><br><span class="line">array[index] = temp;<span class="comment">//把临时变量也就是第一个元素原值保存到第二个元素中</span></span><br><span class="line">&#125;</span><br><span class="line">showArray(array);<span class="comment">//输出直接选择排序后的数组值</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showArray</span><span class="params">(<span class="keyword">int</span>[] array)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i : array)&#123;<span class="comment">//遍历数组</span></span><br><span class="line">System.out.print(<span class="string">&quot;&gt;&quot;</span> + i);<span class="comment">//输出每个数组元素值</span></span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="反转排序"><a href="#反转排序" class="headerlink" title="反转排序"></a>反转排序</h3><h4 id="定义-以相反的顺序将原有数组的内容重新排序"><a href="#定义-以相反的顺序将原有数组的内容重新排序" class="headerlink" title="定义:以相反的顺序将原有数组的内容重新排序"></a>定义:以相反的顺序将原有数组的内容重新排序</h4><h4 id="基本思想-反转排序的基本思想比较简单-也很好理解-其实现思路就是把数组的最后一个元素与都一个元素进行替换-所以只需要循环数组长度的半数次就可以"><a href="#基本思想-反转排序的基本思想比较简单-也很好理解-其实现思路就是把数组的最后一个元素与都一个元素进行替换-所以只需要循环数组长度的半数次就可以" class="headerlink" title="基本思想:反转排序的基本思想比较简单,也很好理解,其实现思路就是把数组的最后一个元素与都一个元素进行替换,所以只需要循环数组长度的半数次就可以."></a>基本思想:反转排序的基本思想比较简单,也很好理解,其实现思路就是把数组的最后一个元素与都一个元素进行替换,所以只需要循环数组长度的半数次就可以.</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReverseSort</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="comment">//创建一个数组</span></span><br><span class="line"><span class="keyword">int</span>[] array = &#123;<span class="number">13</span>,<span class="number">26</span>,<span class="number">77</span>,<span class="number">39</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">100</span>&#125;;</span><br><span class="line"><span class="comment">//创建反转排序类的对象</span></span><br><span class="line">ReverseSort sorter = <span class="keyword">new</span> ReverseSort();</span><br><span class="line"><span class="comment">//调用排序对象的方法将数组反转</span></span><br><span class="line">sorter.sort(array);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] array)</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;数组原有内容: &quot;</span>);</span><br><span class="line">showArray(array);<span class="comment">//输出排序前的数组值</span></span><br><span class="line"><span class="keyword">int</span> temp;</span><br><span class="line"><span class="keyword">int</span> len = array.length;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; len/<span class="number">2</span>;i++)&#123;</span><br><span class="line">temp = array[i];</span><br><span class="line">array[i] = array[len - <span class="number">1</span> -i];</span><br><span class="line">array[len - <span class="number">1</span> - i] = temp;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;数组反转后内容:&quot;</span>);</span><br><span class="line">showArray(array);<span class="comment">//输出排序后的数组值</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showArray</span><span class="params">(<span class="keyword">int</span>[] array)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i : array)&#123;<span class="comment">//遍历数组</span></span><br><span class="line">System.out.print(<span class="string">&quot;\t&quot;</span> + i);<span class="comment">//输出每个数组元素值</span></span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/java/">java</category>
      
      
      <category domain="http://example.com/tags/%E5%AF%BC%E8%88%AA/">导航</category>
      
      <category domain="http://example.com/tags/%E5%88%86%E4%BA%AB/">分享</category>
      
      
      <comments>http://example.com/2021/06/12/Java%E6%95%B0%E7%BB%84/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>CSS</title>
      <link>http://example.com/2021/06/12/CSS/</link>
      <guid>http://example.com/2021/06/12/CSS/</guid>
      <pubDate>Sat, 12 Jun 2021 08:13:46 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;CSS&quot;&gt;&lt;a href=&quot;#CSS&quot; class=&quot;headerlink&quot; title=&quot;CSS&quot;&gt;&lt;/a&gt;CSS&lt;/h1&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h1><span id="more"></span><h2 id="层叠样式表"><a href="#层叠样式表" class="headerlink" title="层叠样式表"></a>层叠样式表</h2><h2 id="CSS用来设置网页中元素的样式"><a href="#CSS用来设置网页中元素的样式" class="headerlink" title="CSS用来设置网页中元素的样式"></a>CSS用来设置网页中元素的样式</h2><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="第一种-在标签内部通过使用style属性来设置元素的样式-lt-p-style-quot-color-red-font-size-60px-quot-gt-zombie-lt-p-gt"><a href="#第一种-在标签内部通过使用style属性来设置元素的样式-lt-p-style-quot-color-red-font-size-60px-quot-gt-zombie-lt-p-gt" class="headerlink" title="第一种:在标签内部通过使用style属性来设置元素的样式 &lt;p style = &quot;color: red; font-size: 60px&quot;&gt;zombie&lt;/p&gt;"></a>第一种:在标签内部通过使用style属性来设置元素的样式 <code>&lt;p style = &quot;color: red; font-size: 60px&quot;&gt;zombie&lt;/p&gt;</code></h3><h3 id="内联样式-行内样式-不推荐使用"><a href="#内联样式-行内样式-不推荐使用" class="headerlink" title="(内联样式,行内样式)不推荐使用"></a>(内联样式,行内样式)不推荐使用</h3><h3 id="第二种-在head里写style标签-得写CSS选择器"><a href="#第二种-在head里写style标签-得写CSS选择器" class="headerlink" title="第二种,在head里写style标签,得写CSS选择器"></a>第二种,在head里写style标签,得写CSS选择器</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="selector-tag">p</span>&#123;</span></span></span><br><span class="line"><span class="css"><span class="xml">      <span class="attribute">color</span>: red;</span></span></span><br><span class="line"><span class="css"><span class="xml">      <span class="attribute">font-size</span>: <span class="number">50px</span></span></span></span><br><span class="line"><span class="css"><span class="xml">    &#125;<span class="comment">/*只能对一个网页起作用*/</span></span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="comment">/*</span></span></span></span><br><span class="line"><span class="comment"><span class="css"><span class="xml">    这也是css内部注释</span></span></span></span><br><span class="line"><span class="comment"><span class="css"><span class="xml">    */</span></span></span></span><br><span class="line"><span class="css"><span class="xml">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br><span class="line">&lt;/head&gt;</span><br></pre></td></tr></table></figure><h3 id="第三种-写在外部样式表-就是将CSS样式编写到一个外部得CSS文件中-然后通过link标签来引入外部得CSS文件"><a href="#第三种-写在外部样式表-就是将CSS样式编写到一个外部得CSS文件中-然后通过link标签来引入外部得CSS文件" class="headerlink" title="第三种:写在外部样式表,就是将CSS样式编写到一个外部得CSS文件中,然后通过link标签来引入外部得CSS文件"></a>第三种:写在外部样式表,就是将CSS样式编写到一个外部得CSS文件中,然后通过link标签来引入外部得CSS文件</h3><h3 id="lt-link-rel-quot-stylesheet-quot-href-quot-style-css-quot-gt"><a href="#lt-link-rel-quot-stylesheet-quot-href-quot-style-css-quot-gt" class="headerlink" title="&lt;link rel=&quot;stylesheet&quot; href=&quot;./style.css&quot;&gt;"></a><code>&lt;link rel=&quot;stylesheet&quot; href=&quot;./style.css&quot;&gt;</code></h3><h3 id="将样式编写到外部得CSS文件中-可以使用到浏览器得缓存机制-从而加快网页得加载速度-提高用户体验"><a href="#将样式编写到外部得CSS文件中-可以使用到浏览器得缓存机制-从而加快网页得加载速度-提高用户体验" class="headerlink" title="将样式编写到外部得CSS文件中,可以使用到浏览器得缓存机制,从而加快网页得加载速度,提高用户体验"></a>将样式编写到外部得CSS文件中,可以使用到浏览器得缓存机制,从而加快网页得加载速度,提高用户体验</h3><h2 id="CSS选择器"><a href="#CSS选择器" class="headerlink" title="CSS选择器"></a>CSS选择器</h2><h3 id="通过选择器可以选中页面中的指定元素-比如选p就是选中页面中所有得p元素"><a href="#通过选择器可以选中页面中的指定元素-比如选p就是选中页面中所有得p元素" class="headerlink" title="通过选择器可以选中页面中的指定元素,比如选p就是选中页面中所有得p元素"></a>通过选择器可以选中页面中的指定元素,比如选p就是选中页面中所有得p元素</h3><h2 id="CSS声明块"><a href="#CSS声明块" class="headerlink" title="CSS声明块"></a>CSS声明块</h2><h3 id="通过声明块来指定要为元素设置的样式"><a href="#通过声明块来指定要为元素设置的样式" class="headerlink" title="通过声明块来指定要为元素设置的样式"></a>通过声明块来指定要为元素设置的样式</h3><h3 id="声明块有一个个声明组成"><a href="#声明块有一个个声明组成" class="headerlink" title="声明块有一个个声明组成"></a>声明块有一个个声明组成</h3><h3 id="声明是一个名值对结构-一个样式名对应一个样式值-名和值之间用-样式用-结尾"><a href="#声明是一个名值对结构-一个样式名对应一个样式值-名和值之间用-样式用-结尾" class="headerlink" title="声明是一个名值对结构(一个样式名对应一个样式值),名和值之间用:,样式用;结尾"></a>声明是一个名值对结构(一个样式名对应一个样式值),名和值之间用:,样式用;结尾</h3><hr><hr><h1 id="常用选择器"><a href="#常用选择器" class="headerlink" title="常用选择器"></a>常用选择器</h1><h2 id="元素选择器"><a href="#元素选择器" class="headerlink" title="元素选择器"></a>元素选择器</h2><h3 id="作用-根据标签名来选中指定的元素"><a href="#作用-根据标签名来选中指定的元素" class="headerlink" title="作用:根据标签名来选中指定的元素"></a>作用:根据标签名来选中指定的元素</h3><h3 id="语法-标签名-例如-p-h1-div"><a href="#语法-标签名-例如-p-h1-div" class="headerlink" title="语法:标签名{},例如:p{};h1{};div{}"></a>语法:标签名{},例如:p{};h1{};div{}</h3><h2 id="id选择器"><a href="#id选择器" class="headerlink" title="id选择器"></a>id选择器</h2><h3 id="作用-根据元素的id属性值选中一个元素"><a href="#作用-根据元素的id属性值选中一个元素" class="headerlink" title="作用:根据元素的id属性值选中一个元素,"></a>作用:根据元素的id属性值选中一个元素,</h3><h3 id="语法-id属性值-例如-zombie"><a href="#语法-id属性值-例如-zombie" class="headerlink" title="语法:#id属性值{},例如: #zombie{},"></a>语法:#id属性值{},例如: #zombie{},</h3><h3 id="id可以重复-但是不能应用于实践"><a href="#id可以重复-但是不能应用于实践" class="headerlink" title="id可以重复,但是不能应用于实践"></a>id可以重复,但是不能应用于实践</h3><h2 id="Class选择器"><a href="#Class选择器" class="headerlink" title="Class选择器"></a>Class选择器</h2><h3 id="作用-可以通过class属性来进行分组-进行一组的选中-它可以重复"><a href="#作用-可以通过class属性来进行分组-进行一组的选中-它可以重复" class="headerlink" title="作用:可以通过class属性来进行分组,进行一组的选中,它可以重复"></a>作用:可以通过class属性来进行分组,进行一组的选中,它可以重复</h3><h3 id="语法-class名称"><a href="#语法-class名称" class="headerlink" title="语法: .class名称{}"></a>语法: .class名称{}</h3><h3 id="也可以设置多个class-使用空格隔开-例如-lt-h1-class-quot-zom-bie-quot-gt-我是属于两个组的哦-lt-h1-gt"><a href="#也可以设置多个class-使用空格隔开-例如-lt-h1-class-quot-zom-bie-quot-gt-我是属于两个组的哦-lt-h1-gt" class="headerlink" title="也可以设置多个class,使用空格隔开,例如&lt;h1 class=&quot;zom bie&quot;&gt;我是属于两个组的哦&lt;/h1&gt;"></a>也可以设置多个class,使用空格隔开,例如<code>&lt;h1 class=&quot;zom bie&quot;&gt;我是属于两个组的哦&lt;/h1&gt;</code></h3><h2 id="通配选择器"><a href="#通配选择器" class="headerlink" title="通配选择器"></a>通配选择器</h2><h3 id="作用-选中页面中的所有元素"><a href="#作用-选中页面中的所有元素" class="headerlink" title="作用:选中页面中的所有元素"></a>作用:选中页面中的所有元素</h3><h3 id="语法"><a href="#语法" class="headerlink" title="语法: *"></a>语法: *</h3><hr><hr><h1 id="复合选择器"><a href="#复合选择器" class="headerlink" title="复合选择器"></a>复合选择器</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">div.red&#123;&#125;<span class="comment">/*元素选择器+class选择器&#123;&#125;  因为必须使用元素选择器开头*/</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">交集选择器</span></span><br><span class="line"><span class="comment">作用:选中同时复合多个条件的元素</span></span><br><span class="line"><span class="comment">语法:选择器1选择器2选择器3....&#123;&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">h1,span&#123;&#125;<span class="comment">/*不是单独只能使用元素选择器,所有的都可以组合*/</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">选择器分组(并集选择器)</span></span><br><span class="line"><span class="comment">作用:同时选择多个选择器对应的元素</span></span><br><span class="line"><span class="comment">语法:选择器1,选择器2,选择器3....&#123;&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><hr><hr><h1 id="关系选择器"><a href="#关系选择器" class="headerlink" title="关系选择器"></a>关系选择器</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">我是div</span><br><span class="line">&lt;p&gt;</span><br><span class="line">我是div中的p元素(父子关系)</span><br><span class="line">&lt;span&gt;我是p中的span元素(父子关系),我(后代)是div(祖先)的后代元素&lt;/span&gt;</span><br><span class="line">&lt;/p&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>我是div中的span元素(父子关系),我与p是兄弟关系<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h2 id=""><a href="#" class="headerlink" title=""></a></h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">div &gt; span&#123;&#125;<span class="comment">/* div.class名 &gt; span&#123;&#125;可以混合使用的*/</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">子元素选择器</span></span><br><span class="line"><span class="comment">作用:选中指定父元素的指定子元素</span></span><br><span class="line"><span class="comment">语法:父元素 &gt; 子元素&#123;&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">     div span&#123;&#125;</span><br><span class="line">     <span class="comment">/*</span></span><br><span class="line"><span class="comment">     后代元素选择器</span></span><br><span class="line"><span class="comment">     作用:选中指定元素内的指定后代元素</span></span><br><span class="line"><span class="comment">     语法:祖先 后代</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">     p + span&#123;&#125;<span class="comment">/*紧挨着的才可以,中间隔一个都不行*/</span></span><br><span class="line">     p ~ span&#123;&#125;<span class="comment">/*选中后面所有的兄弟*/</span></span><br><span class="line">     <span class="comment">/*</span></span><br><span class="line"><span class="comment">     兄弟元素选择器</span></span><br><span class="line"><span class="comment">     作用:选择下一个兄弟</span></span><br><span class="line"><span class="comment">     语法:前一个 + 下一个&#123;&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><hr><hr><h1 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h1><h2 id="因为有class和id的选择器-所以属性一般对其使用"><a href="#因为有class和id的选择器-所以属性一般对其使用" class="headerlink" title="因为有class和id的选择器,所以属性一般对其使用"></a>因为有class和id的选择器,所以属性一般对其使用</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line"><span class="comment">/* [属性名] 选择含有指定属性的元素 */</span></span><br><span class="line">p[title]&#123;&#125;<span class="comment">/* 选择p标签且含有title属性的元素 */</span></span><br><span class="line"><span class="comment">/* [属性名=属性值] 选择含有指定属性和属性值的元素 */</span></span><br><span class="line">p[title = <span class="string">&quot;zombie&quot;</span>]&#123;&#125;</span><br><span class="line"><span class="comment">/* [属性名^=属性值] 选择属性值以指定值开头的元素 */</span></span><br><span class="line">p[title^=zombie]&#123;&#125;</span><br><span class="line"><span class="comment">/* [属性名$=属性值] 选择属性值以指定值结尾的元素 */</span></span><br><span class="line">p[title$=zombie]&#123;&#125;</span><br><span class="line"><span class="comment">/* [属性名*=属性值] 选择属性值中含有某值的元素 位置不重要有这个值或这个字母即可 */</span></span><br><span class="line">p[title*=zombie]&#123;&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><hr><hr><h1 id="伪类选择器"><a href="#伪类选择器" class="headerlink" title="伪类选择器"></a>伪类选择器</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line"><span class="comment">/*伪类(不存在的类,特殊的)</span></span><br><span class="line"><span class="comment">伪类用来描述一个元素的特殊状态</span></span><br><span class="line"><span class="comment">比如:第一个子元素,被点击的元素,鼠标移入的元素...</span></span><br><span class="line"><span class="comment">伪类一般情况下都是:开头</span></span><br><span class="line"><span class="comment">:first-child 第一个子元素</span></span><br><span class="line"><span class="comment">:last-child 最后一个子元素</span></span><br><span class="line"><span class="comment">:nth-child(n) 选中第n个子元素 </span></span><br><span class="line"><span class="comment">     特殊值:n 第n个</span></span><br><span class="line"><span class="comment">            2n /even 偶数位</span></span><br><span class="line"><span class="comment">            2n+1 /odd 奇数位</span></span><br><span class="line"><span class="comment"> 以上根据所有子元素进行排位,不是单独某一个</span></span><br><span class="line"><span class="comment"> :first-of-type</span></span><br><span class="line"><span class="comment"> :last-of-type</span></span><br><span class="line"><span class="comment"> :nth-of-type()</span></span><br><span class="line"><span class="comment"> 跟上面相同,不过他们是在同类型中进行排序</span></span><br><span class="line"><span class="comment"> :not() 否定伪类</span></span><br><span class="line"><span class="comment"> 将符合条件的元素从选择器中去除</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">ul &gt; li:first-child&#123;&#125;</span><br><span class="line">ul &gt; li:<span class="function"><span class="title">not</span>(<span class="params">:first-child</span>)</span>&#123;&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h2 id="超链接伪类"><a href="#超链接伪类" class="headerlink" title="超链接伪类"></a>超链接伪类</h2><h3 id="超链接访问没访问过是不同的状态-主要区别是颜色不同-一红一蓝"><a href="#超链接访问没访问过是不同的状态-主要区别是颜色不同-一红一蓝" class="headerlink" title="超链接访问没访问过是不同的状态,主要区别是颜色不同,一红一蓝"></a>超链接访问没访问过是不同的状态,主要区别是颜色不同,一红一蓝</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">link 用来表示没访问过的连接</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">a:link&#123;</span><br><span class="line"><span class="attr">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">:visited 用来表示访问过的链接</span></span><br><span class="line"><span class="comment">由于隐私的原因,所以visited这个伪类只能修改链接的颜色</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="attr">a</span>:visited&#123;&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">:hover 用来表示鼠标移入的状态</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="attr">a</span>:hover&#123;&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">:active 用来表示鼠标点击</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="attr">a</span>:active&#123;&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><hr><hr><h1 id="伪元素选择器"><a href="#伪元素选择器" class="headerlink" title="伪元素选择器"></a>伪元素选择器</h1><h2 id="伪元素"><a href="#伪元素" class="headerlink" title="伪元素"></a>伪元素</h2><h3 id="表示页面中一些特殊的并不真实的存在的元素怒-特殊的位置"><a href="#表示页面中一些特殊的并不真实的存在的元素怒-特殊的位置" class="headerlink" title="表示页面中一些特殊的并不真实的存在的元素怒(特殊的位置)"></a>表示页面中一些特殊的并不真实的存在的元素怒(特殊的位置)</h3><h3 id="伪元素使用-开头"><a href="#伪元素使用-开头" class="headerlink" title="伪元素使用 :: 开头"></a>伪元素使用 :: 开头</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">::first-letter 表示第一个字母</span></span><br><span class="line"><span class="comment">::first-line 表示第一行</span></span><br><span class="line"><span class="comment">::selection 表示选中的内容</span></span><br><span class="line"><span class="comment">::before 元素的开始位置</span></span><br><span class="line"><span class="comment">::after 元素的最后位置</span></span><br><span class="line"><span class="comment">- before 和 after 必须结合content属性来使用</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">p::first-letter&#123;&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><hr><hr><h1 id="样式的继承"><a href="#样式的继承" class="headerlink" title="样式的继承"></a>样式的继承</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*样式的继承:我们为一个元素设置的样式同时也会应用到它的后代身上*/</span></span><br><span class="line">&lt;style&gt;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">继承发生在后代和祖先之间,祖先样式会被后代继承</span></span><br><span class="line"><span class="comment">可以设置一次,其他就全设置具有该样式</span></span><br><span class="line"><span class="comment">并不是所有的样式都被继承,背景和布局相关的等不会被继承</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><hr><hr><h1 id="选择器的权重"><a href="#选择器的权重" class="headerlink" title="选择器的权重"></a>选择器的权重</h1><h2 id="样式冲突"><a href="#样式冲突" class="headerlink" title="样式冲突"></a>样式冲突</h2><h3 id="当我们通过不同的选择器-选中相同的元素-并且为相同的样式修改不同的样式"><a href="#当我们通过不同的选择器-选中相同的元素-并且为相同的样式修改不同的样式" class="headerlink" title="当我们通过不同的选择器,选中相同的元素,并且为相同的样式修改不同的样式"></a>当我们通过不同的选择器,选中相同的元素,并且为相同的样式修改不同的样式</h3><h3 id="发生冲突后-谁优先由选择器的权重决定"><a href="#发生冲突后-谁优先由选择器的权重决定" class="headerlink" title="发生冲突后,谁优先由选择器的权重决定"></a>发生冲突后,谁优先由选择器的权重决定</h3><h4 id="选择器的权重-1"><a href="#选择器的权重-1" class="headerlink" title="选择器的权重"></a>选择器的权重</h4><h4 id="内联样式-优先级1000"><a href="#内联样式-优先级1000" class="headerlink" title="内联样式:优先级1000,"></a>内联样式:优先级1000,</h4><h4 id="id选择器-优先级100"><a href="#id选择器-优先级100" class="headerlink" title="id选择器:优先级100,"></a>id选择器:优先级100,</h4><h4 id="类选择器-伪类选择器-优先级10"><a href="#类选择器-伪类选择器-优先级10" class="headerlink" title="类选择器/伪类选择器:优先级10,"></a>类选择器/伪类选择器:优先级10,</h4><h4 id="元素选择器-优先级1"><a href="#元素选择器-优先级1" class="headerlink" title="元素选择器:优先级1,"></a>元素选择器:优先级1,</h4><h4 id="通配选择器-优先级0"><a href="#通配选择器-优先级0" class="headerlink" title="通配选择器:优先级0"></a>通配选择器:优先级0</h4><h4 id="继承的样式-没有优先级"><a href="#继承的样式-没有优先级" class="headerlink" title="继承的样式:没有优先级"></a>继承的样式:没有优先级</h4><h4 id="并集-比较优先级-需要将所有的选择器的优先级加在一起-再对比-选择器累加即使再高也不会超过上一级的选择器-不能跨数量级"><a href="#并集-比较优先级-需要将所有的选择器的优先级加在一起-再对比-选择器累加即使再高也不会超过上一级的选择器-不能跨数量级" class="headerlink" title="并集:比较优先级,需要将所有的选择器的优先级加在一起,再对比,选择器累加即使再高也不会超过上一级的选择器,不能跨数量级"></a>并集:比较优先级,需要将所有的选择器的优先级加在一起,再对比,选择器累加即使再高也不会超过上一级的选择器,不能跨数量级</h4><h4 id="分组选择器单独计算-谁的优先级就是谁的优先级-因为是逗号隔开的"><a href="#分组选择器单独计算-谁的优先级就是谁的优先级-因为是逗号隔开的" class="headerlink" title="分组选择器单独计算,谁的优先级就是谁的优先级,因为是逗号隔开的"></a>分组选择器单独计算,谁的优先级就是谁的优先级,因为是逗号隔开的</h4><h4 id="可以再某一个样式的后边添加-important-则此时该样式或获取到最高的优先级-甚至超过内联样式"><a href="#可以再某一个样式的后边添加-important-则此时该样式或获取到最高的优先级-甚至超过内联样式" class="headerlink" title="可以再某一个样式的后边添加 !important,则此时该样式或获取到最高的优先级,甚至超过内联样式"></a>可以再某一个样式的后边添加 !important,则此时该样式或获取到最高的优先级,甚至超过内联样式</h4><hr><hr><h1 id="长度单位"><a href="#长度单位" class="headerlink" title="长度单位"></a>长度单位</h1><h2 id="像素"><a href="#像素" class="headerlink" title="像素"></a>像素</h2><h3 id="由一个个小点构成"><a href="#由一个个小点构成" class="headerlink" title="由一个个小点构成"></a>由一个个小点构成</h3><h3 id="不同屏幕下像素不一样-所以相同的200px不一定一样大"><a href="#不同屏幕下像素不一样-所以相同的200px不一定一样大" class="headerlink" title="不同屏幕下像素不一样,所以相同的200px不一定一样大"></a>不同屏幕下像素不一样,所以相同的200px不一定一样大</h3><h2 id="百分比"><a href="#百分比" class="headerlink" title="百分比"></a>百分比</h2><h3 id="百分比可以设置属性值相对于父元素属性的百分比-跟随父元素改变"><a href="#百分比可以设置属性值相对于父元素属性的百分比-跟随父元素改变" class="headerlink" title="百分比可以设置属性值相对于父元素属性的百分比,跟随父元素改变"></a>百分比可以设置属性值相对于父元素属性的百分比,跟随父元素改变</h3><h2 id="em"><a href="#em" class="headerlink" title="em"></a>em</h2><h3 id="是相对于元素的字体大小来计算的"><a href="#是相对于元素的字体大小来计算的" class="headerlink" title="是相对于元素的字体大小来计算的"></a>是相对于元素的字体大小来计算的</h3><h3 id="1em-1font-size"><a href="#1em-1font-size" class="headerlink" title="1em = 1font-size"></a>1em = 1font-size</h3><h3 id="em会根据字体大小的改变而改变"><a href="#em会根据字体大小的改变而改变" class="headerlink" title="em会根据字体大小的改变而改变"></a>em会根据字体大小的改变而改变</h3><h2 id="rem"><a href="#rem" class="headerlink" title="rem"></a>rem</h2><h4 id="rem是相对于根元素的字体大小来计算"><a href="#rem是相对于根元素的字体大小来计算" class="headerlink" title="rem是相对于根元素的字体大小来计算"></a>rem是相对于根元素的字体大小来计算</h4><hr><hr><h1 id="颜色单位"><a href="#颜色单位" class="headerlink" title="颜色单位"></a>颜色单位</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">.box1&#123;</span><br><span class="line"><span class="attr">width</span>: 100px;</span><br><span class="line">height: 100px;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">颜色单位</span></span><br><span class="line"><span class="comment">在CSS中可以直接使用颜色名来设置各种颜色</span></span><br><span class="line"><span class="comment">RGB值也可以</span></span><br><span class="line"><span class="comment">RGB通过三种颜色的不同浓度来调配出不同的颜色</span></span><br><span class="line"><span class="comment">R:red G:green B:blue</span></span><br><span class="line"><span class="comment">每一种颜色的范围在0 - 255之间</span></span><br><span class="line"><span class="comment">语法:RGB(红色,绿色,蓝色)</span></span><br><span class="line"><span class="comment">RGBA:</span></span><br><span class="line"><span class="comment">在RGB的基础上增加了一个a表示不透明度</span></span><br><span class="line"><span class="comment">需要四个值,前三个和RGB一样,后一个表示不透明度</span></span><br><span class="line"><span class="comment">1表示完全不透明,0表示完全透明,0.5半透明</span></span><br><span class="line"><span class="comment">十六进制的RGB值</span></span><br><span class="line"><span class="comment">语法:#红色,绿色,蓝色</span></span><br><span class="line"><span class="comment">颜色浓度通过 00-ff</span></span><br><span class="line"><span class="comment">如果颜色两两重复可以进行简写</span></span><br><span class="line"><span class="comment">#aabbcc ---&gt; #abc</span></span><br><span class="line"><span class="comment">HSL值 HSLA值</span></span><br><span class="line"><span class="comment">H:色相 0-360</span></span><br><span class="line"><span class="comment">S:饱和度 颜色的浓度 0 - 100</span></span><br><span class="line"><span class="comment">L:亮度 颜色的亮度 0-100</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">          background-color: rgb(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>)<span class="comment">//白</span></span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><hr><hr><h1 id="Layout"><a href="#Layout" class="headerlink" title="Layout"></a>Layout</h1><h2 id="文档流-normal-flow-这些层中最底下的被称为文档流"><a href="#文档流-normal-flow-这些层中最底下的被称为文档流" class="headerlink" title="文档流(normal flow):这些层中最底下的被称为文档流"></a>文档流(normal flow):这些层中最底下的被称为文档流</h2><h2 id="元素有两个状态-在文档流中和不在文档流中-脱离文档流"><a href="#元素有两个状态-在文档流中和不在文档流中-脱离文档流" class="headerlink" title="元素有两个状态:在文档流中和不在文档流中(脱离文档流)"></a>元素有两个状态:在文档流中和不在文档流中(脱离文档流)</h2><hr><hr><h1 id="盒模型"><a href="#盒模型" class="headerlink" title="盒模型"></a>盒模型</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">box model:</span></span><br><span class="line"><span class="comment">-CSS将页面中的所有元素都设置为了一个矩形的盒子</span></span><br><span class="line"><span class="comment">-将元素设置为矩形的盒子后,对页面的布局就变成将不同的盒子摆放到不同的位置</span></span><br><span class="line"><span class="comment">-每一个盒子都由以下几个部分组成</span></span><br><span class="line"><span class="comment">-内容区(content):元素中的所有子元素和文本内容都在内容去中排列</span></span><br><span class="line"><span class="comment">-width:设置内容区的宽度</span></span><br><span class="line"><span class="comment">-height:设置内容区的高度</span></span><br><span class="line"><span class="comment">-内边距(padding):内容区和边框之间的距离</span></span><br><span class="line"><span class="comment">padding-top:</span></span><br><span class="line"><span class="comment">padding-right:</span></span><br><span class="line"><span class="comment">padding-bottom:</span></span><br><span class="line"><span class="comment">padding-left:</span></span><br><span class="line"><span class="comment">-边框(border):属于盒子边缘,</span></span><br><span class="line"><span class="comment">-边框的宽度:border-width:有默认值,三个像素:一共四个值.</span></span><br><span class="line"><span class="comment">有border-xxx-width:top right bottom left,用于单独设置</span></span><br><span class="line"><span class="comment">-边框的颜色border-color</span></span><br><span class="line"><span class="comment">-边框的样式border-style</span></span><br><span class="line"><span class="comment">border简写属性,通过该属性可以同时设置边框所有的相关样式,并且没有顺序要求</span></span><br><span class="line"><span class="comment">-外边距(margin):</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><hr><hr><h1 id="盒子大小"><a href="#盒子大小" class="headerlink" title="盒子大小"></a>盒子大小</h1><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*bos-sizing:用来设置盒子大小的计算方式(设置width和height的作用)</span></span><br><span class="line"><span class="comment">content-box:默认值,宽度和高度用来设置内容的大小</span></span><br><span class="line"><span class="comment">border-box:宽度和高度用来设置整个盒子可见框的大小*/</span></span><br></pre></td></tr></table></figure><hr><hr><h1 id="轮廓和圆角"><a href="#轮廓和圆角" class="headerlink" title="轮廓和圆角"></a>轮廓和圆角</h1>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/%E6%A0%B7%E5%BC%8F/">样式</category>
      
      
      <category domain="http://example.com/tags/%E5%AF%BC%E8%88%AA/">导航</category>
      
      <category domain="http://example.com/tags/%E5%88%86%E4%BA%AB/">分享</category>
      
      
      <comments>http://example.com/2021/06/12/CSS/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Java练习题</title>
      <link>http://example.com/2021/06/11/Java%E7%BB%83%E4%B9%A0%E9%A2%98/</link>
      <guid>http://example.com/2021/06/11/Java%E7%BB%83%E4%B9%A0%E9%A2%98/</guid>
      <pubDate>Fri, 11 Jun 2021 13:24:57 GMT</pubDate>
      
      
      
      
      
      
      <comments>http://example.com/2021/06/11/Java%E7%BB%83%E4%B9%A0%E9%A2%98/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>HTML</title>
      <link>http://example.com/2021/06/11/HTML/</link>
      <guid>http://example.com/2021/06/11/HTML/</guid>
      <pubDate>Fri, 11 Jun 2021 06:08:09 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;HTML&quot;&gt;&lt;a href=&quot;#HTML&quot; class=&quot;headerlink&quot; title=&quot;HTML&quot;&gt;&lt;/a&gt;HTML&lt;/h1&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h1><span id="more"></span><h1 id="网页开发标准W3C"><a href="#网页开发标准W3C" class="headerlink" title="网页开发标准W3C"></a>网页开发标准W3C</h1><h2 id="网页分为三部分"><a href="#网页分为三部分" class="headerlink" title="网页分为三部分"></a>网页分为三部分</h2><h3 id="结构-HTML"><a href="#结构-HTML" class="headerlink" title="结构:HTML"></a>结构:HTML</h3><h3 id="表现-CSS"><a href="#表现-CSS" class="headerlink" title="表现:CSS"></a>表现:CSS</h3><h3 id="行为-JavaScript用于响应用户操作"><a href="#行为-JavaScript用于响应用户操作" class="headerlink" title="行为:JavaScript用于响应用户操作"></a>行为:JavaScript用于响应用户操作</h3><hr><hr><h1 id="HTML-1"><a href="#HTML-1" class="headerlink" title="HTML"></a>HTML</h1><h2 id="超文本标记语言"><a href="#超文本标记语言" class="headerlink" title="超文本标记语言"></a><strong>超文本标记语言</strong></h2><h2 id="使用标签的形式来标识网页中的不同组成成分"><a href="#使用标签的形式来标识网页中的不同组成成分" class="headerlink" title="使用标签的形式来标识网页中的不同组成成分"></a>使用<strong>标签</strong>的形式来标识网页中的不同组成成分</h2><h2 id="所谓超文本指的就是超链接-使用超链接跳转页面"><a href="#所谓超文本指的就是超链接-使用超链接跳转页面" class="headerlink" title="所谓超文本指的就是超链接,使用超链接跳转页面"></a>所谓超文本指的就是<strong>超链接</strong>,使用超链接跳转页面</h2><hr><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="lt-h1-gt-一级标题-lt-h1-gt"><a href="#lt-h1-gt-一级标题-lt-h1-gt" class="headerlink" title="&lt;h1&gt;一级标题&lt;/h1&gt;"></a><code>&lt;h1&gt;一级标题&lt;/h1&gt;</code></h3><h3 id="lt-p-gt-段落-lt-p-gt"><a href="#lt-p-gt-段落-lt-p-gt" class="headerlink" title="&lt;p&gt;段落&lt;/p&gt;"></a><code>&lt;p&gt;段落&lt;/p&gt;</code></h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span>网页中源数据,不会出现在网页上</span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span>需要显示的东西写在这里<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="自结束标签-lt-img-gt-lt-input-gt"><a href="#自结束标签-lt-img-gt-lt-input-gt" class="headerlink" title="自结束标签&lt;img&gt;&lt;input&gt;"></a>自结束标签<code>&lt;img&gt;&lt;input&gt;</code></h3><h3 id="属性-红色字体-lt-h1-gt-lt-font-color-quot-red-quot-gt-zombies-lt-font-gt-zheng-lt-h1-gt"><a href="#属性-红色字体-lt-h1-gt-lt-font-color-quot-red-quot-gt-zombies-lt-font-gt-zheng-lt-h1-gt" class="headerlink" title="属性:红色字体 &lt;h1&gt;&lt;font color = &quot;red&quot;&gt;zombies&lt;/font&gt;zheng&lt;/h1&gt;"></a>属性:红色字体 <code>&lt;h1&gt;&lt;font color = &quot;red&quot;&gt;zombies&lt;/font&gt;zheng&lt;/h1&gt;</code></h3><hr><hr><h1 id="HTML语法"><a href="#HTML语法" class="headerlink" title="HTML语法"></a>HTML语法</h1><h2 id="在网页中多个空格会被解析成一个空格"><a href="#在网页中多个空格会被解析成一个空格" class="headerlink" title="在网页中多个空格会被解析成一个空格"></a>在网页中多个空格会被解析成一个空格</h2><h2 id="实体的语法"><a href="#实体的语法" class="headerlink" title="实体的语法"></a>实体的语法</h2><h3 id="amp-实体的名字"><a href="#amp-实体的名字" class="headerlink" title="&amp;实体的名字;"></a>&amp;实体的名字;</h3><h4 id="amp-nbsp-空格"><a href="#amp-nbsp-空格" class="headerlink" title="&amp;nbsp:空格"></a>&amp;nbsp:空格</h4><h4 id="amp-gt-大于号"><a href="#amp-gt-大于号" class="headerlink" title="&amp;gt:大于号"></a>&amp;gt:大于号</h4><h4 id="amp-lt-小于号"><a href="#amp-lt-小于号" class="headerlink" title="&amp;lt:小于号"></a>&amp;lt:小于号</h4><h4 id="amp-copy-版权符号"><a href="#amp-copy-版权符号" class="headerlink" title="&amp;copy:版权符号"></a>&amp;copy:版权符号</h4><h3 id="meta主要用于设置网页中的一些元数据-元数据不给用户看-charset-字符集-name-指定的数据名称-content-指定的数据的内容"><a href="#meta主要用于设置网页中的一些元数据-元数据不给用户看-charset-字符集-name-指定的数据名称-content-指定的数据的内容" class="headerlink" title="meta主要用于设置网页中的一些元数据,元数据不给用户看;charset:字符集;name:指定的数据名称;content:指定的数据的内容;"></a>meta主要用于设置网页中的一些元数据,元数据不给用户看;charset:字符集;name:指定的数据名称;content:指定的数据的内容;</h3><h3 id="keywords表示网站的关键字-可以写多个"><a href="#keywords表示网站的关键字-可以写多个" class="headerlink" title="keywords表示网站的关键字.可以写多个"></a>keywords表示网站的关键字.可以写多个</h3><h3 id="description-用于指定网站的描述"><a href="#description-用于指定网站的描述" class="headerlink" title="description 用于指定网站的描述"></a>description 用于指定网站的描述</h3><h3 id="title标签的内容会作为搜索结果的超链接上的文字显示"><a href="#title标签的内容会作为搜索结果的超链接上的文字显示" class="headerlink" title="title标签的内容会作为搜索结果的超链接上的文字显示"></a>title标签的内容会作为搜索结果的超链接上的文字显示</h3><h4 id="lt-meta-name-quot-keywords-quot-content-quot-zombie-quot-gt"><a href="#lt-meta-name-quot-keywords-quot-content-quot-zombie-quot-gt" class="headerlink" title="&lt;meta name=&quot;keywords&quot; content=&quot;zombie&quot;&gt;"></a><code>&lt;meta name=&quot;keywords&quot; content=&quot;zombie&quot;&gt;</code></h4><h4 id="将网页重定向到另一个网站-lt-meta-http-equiv-quot-refresh-quot-content-quot-www-zhengtianhao-cn-quot-gt"><a href="#将网页重定向到另一个网站-lt-meta-http-equiv-quot-refresh-quot-content-quot-www-zhengtianhao-cn-quot-gt" class="headerlink" title="将网页重定向到另一个网站 &lt;meta http-equiv=&quot;refresh&quot; content=&quot;www.zhengtianhao.cn&quot;&gt;"></a>将网页重定向到另一个网站 <code>&lt;meta http-equiv=&quot;refresh&quot; content=&quot;www.zhengtianhao.cn&quot;&gt;</code></h4><hr><hr><h2 id="标签标题"><a href="#标签标题" class="headerlink" title="标签标题"></a>标签标题</h2><h3 id="h1-h6-六级标题-h1最重要-仅次于title-只能用一个"><a href="#h1-h6-六级标题-h1最重要-仅次于title-只能用一个" class="headerlink" title="h1-h6 六级标题,h1最重要.仅次于title,只能用一个"></a>h1-h6 六级标题,h1最重要.仅次于title,只能用一个</h3><h3 id="独占一行元素被称为快元素-block-element"><a href="#独占一行元素被称为快元素-block-element" class="headerlink" title="独占一行元素被称为快元素(block element)"></a>独占一行元素被称为快元素(block element)</h3><h3 id="p元素表示页面中的段落-也是一个块元素-一般通过块元素对页面进行布局"><a href="#p元素表示页面中的段落-也是一个块元素-一般通过块元素对页面进行布局" class="headerlink" title="p元素表示页面中的段落,也是一个块元素(一般通过块元素对页面进行布局)"></a>p元素表示页面中的段落,也是一个块元素(一般通过块元素对页面进行布局)</h3><h3 id="hgroup标签用来为标题分组-可以将一组相关的标题同时放入到hgroup-也是块元素"><a href="#hgroup标签用来为标题分组-可以将一组相关的标题同时放入到hgroup-也是块元素" class="headerlink" title="hgroup标签用来为标题分组,可以将一组相关的标题同时放入到hgroup,也是块元素"></a>hgroup标签用来为标题分组,可以将一组相关的标题同时放入到hgroup,也是块元素</h3><h3 id="em标签用于表示语音语调的一个家中-不会独占一行的元素叫行内元素-inline-element"><a href="#em标签用于表示语音语调的一个家中-不会独占一行的元素叫行内元素-inline-element" class="headerlink" title="em标签用于表示语音语调的一个家中(不会独占一行的元素叫行内元素(inline element))"></a>em标签用于表示语音语调的一个家中(不会独占一行的元素叫行内元素(inline element))</h3><h3 id="strong标签表示强调-加粗-行内元素-行内元素主要用来包裹文字"><a href="#strong标签表示强调-加粗-行内元素-行内元素主要用来包裹文字" class="headerlink" title="strong标签表示强调,加粗,行内元素(行内元素主要用来包裹文字)"></a>strong标签表示强调,加粗,行内元素(行内元素主要用来包裹文字)</h3><h3 id="blockquote表示一个长引用-块元素-q表示一个短引用"><a href="#blockquote表示一个长引用-块元素-q表示一个短引用" class="headerlink" title="blockquote表示一个长引用,块元素;q表示一个短引用"></a>blockquote表示一个长引用,块元素;q表示一个短引用</h3><h3 id="一般情况下是块元素中放行内元素"><a href="#一般情况下是块元素中放行内元素" class="headerlink" title="一般情况下是块元素中放行内元素"></a>一般情况下是块元素中放行内元素</h3><h3 id="浏览器在解析网页时-会自动对网页下不符合规范的内容进行修正"><a href="#浏览器在解析网页时-会自动对网页下不符合规范的内容进行修正" class="headerlink" title="浏览器在解析网页时,会自动对网页下不符合规范的内容进行修正"></a>浏览器在解析网页时,会自动对网页下不符合规范的内容进行修正</h3><hr><hr><h1 id="布局标签"><a href="#布局标签" class="headerlink" title="布局标签"></a>布局标签</h1><h3 id="header标签表示网页的头部"><a href="#header标签表示网页的头部" class="headerlink" title="header标签表示网页的头部"></a>header标签表示网页的头部</h3><h3 id="main标签表示网页的主体部分-一个网页只能有一个"><a href="#main标签表示网页的主体部分-一个网页只能有一个" class="headerlink" title="main标签表示网页的主体部分(一个网页只能有一个)"></a>main标签表示网页的主体部分(一个网页只能有一个)</h3><h3 id="footer标签表示网页的底部"><a href="#footer标签表示网页的底部" class="headerlink" title="footer标签表示网页的底部"></a>footer标签表示网页的底部</h3><h3 id="nav标签表示网页中的导航"><a href="#nav标签表示网页中的导航" class="headerlink" title="nav标签表示网页中的导航"></a>nav标签表示网页中的导航</h3><h3 id="aside标签表示和主体相关的其他内容-侧边栏"><a href="#aside标签表示和主体相关的其他内容-侧边栏" class="headerlink" title="aside标签表示和主体相关的其他内容(侧边栏)"></a>aside标签表示和主体相关的其他内容(侧边栏)</h3><h3 id="article标签表示一个文章"><a href="#article标签表示一个文章" class="headerlink" title="article标签表示一个文章"></a>article标签表示一个文章</h3><h3 id="section表示一个独立的区块"><a href="#section表示一个独立的区块" class="headerlink" title="section表示一个独立的区块"></a>section表示一个独立的区块</h3><h3 id="div-没有意义-就用来表示一个区块"><a href="#div-没有意义-就用来表示一个区块" class="headerlink" title="div 没有意义,就用来表示一个区块."></a>div 没有意义,就用来表示一个区块.</h3><h3 id="span没有语义-行内元素"><a href="#span没有语义-行内元素" class="headerlink" title="span没有语义,行内元素,"></a>span没有语义,行内元素,</h3><hr><hr><h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h1><h2 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h2><h3 id="使用ul标签来创建有序列表-用li表示列表项"><a href="#使用ul标签来创建有序列表-用li表示列表项" class="headerlink" title="使用ul标签来创建有序列表,用li表示列表项"></a>使用ul标签来创建有序列表,用li表示列表项</h3><h2 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h2><h3 id="使用ol标签来创建有序列表-用li表示列表项"><a href="#使用ol标签来创建有序列表-用li表示列表项" class="headerlink" title="使用ol标签来创建有序列表,用li表示列表项"></a>使用ol标签来创建有序列表,用li表示列表项</h3><h2 id="定义列表"><a href="#定义列表" class="headerlink" title="定义列表"></a>定义列表</h2><h3 id="使用dl标签来创建一个定义列表-用dt来表示定义的内容-使用dd来对内容进行解释说明"><a href="#使用dl标签来创建一个定义列表-用dt来表示定义的内容-使用dd来对内容进行解释说明" class="headerlink" title="使用dl标签来创建一个定义列表,用dt来表示定义的内容,使用dd来对内容进行解释说明"></a>使用dl标签来创建一个定义列表,用dt来表示定义的内容,使用dd来对内容进行解释说明</h3><h2 id="列表之间可以互相嵌套"><a href="#列表之间可以互相嵌套" class="headerlink" title="列表之间可以互相嵌套"></a>列表之间可以互相嵌套</h2><hr><hr><h1 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h1><h2 id="跳转页面-跳到当前页的某个位置"><a href="#跳转页面-跳到当前页的某个位置" class="headerlink" title="跳转页面,跳到当前页的某个位置"></a>跳转页面,跳到当前页的某个位置</h2><h3 id="使用-a-标签来定义超链接-行内元素-在a里除了它可以放任何元素"><a href="#使用-a-标签来定义超链接-行内元素-在a里除了它可以放任何元素" class="headerlink" title="使用 a 标签来定义超链接,行内元素,在a里除了它可以放任何元素"></a>使用 a 标签来定义超链接,行内元素,在a里除了它可以放任何元素</h3><h3 id="lt-a-href-quot-www-zhengtianhao-cn-quot-gt-博客-也可以跳自己编辑的页面-lt-a-gt"><a href="#lt-a-href-quot-www-zhengtianhao-cn-quot-gt-博客-也可以跳自己编辑的页面-lt-a-gt" class="headerlink" title="&lt;a href = &quot;www.zhengtianhao.cn&quot;&gt;博客//也可以跳自己编辑的页面&lt;/a&gt;"></a><code>&lt;a href = &quot;www.zhengtianhao.cn&quot;&gt;博客//也可以跳自己编辑的页面&lt;/a&gt;</code></h3><h3 id="当我们需要跳转到一个服务器内部的页面时-需要写相对路径-当前目录-可不写-上一级目录"><a href="#当我们需要跳转到一个服务器内部的页面时-需要写相对路径-当前目录-可不写-上一级目录" class="headerlink" title="当我们需要跳转到一个服务器内部的页面时,需要写相对路径(./当前目录(可不写);../上一级目录)"></a>当我们需要跳转到一个服务器内部的页面时,需要写相对路径(./当前目录(可不写);../上一级目录)</h3><h3 id="有target属性-用来指定超链打开的位置-可选值"><a href="#有target属性-用来指定超链打开的位置-可选值" class="headerlink" title="有target属性:用来指定超链打开的位置,可选值:"></a>有target属性:用来指定超链打开的位置,可选值:</h3><h3 id="self-默认值-在当前页面中打开超链接"><a href="#self-默认值-在当前页面中打开超链接" class="headerlink" title="_self 默认值 在当前页面中打开超链接;"></a>_self 默认值 在当前页面中打开超链接;</h3><h3 id="blank-在一个新的页面中代开链接"><a href="#blank-在一个新的页面中代开链接" class="headerlink" title="_blank:在一个新的页面中代开链接;"></a>_blank:在一个新的页面中代开链接;</h3><h3 id="可以直接将超链接的href属性设置为-这样点击超链接以后页面不会发生跳转-反而会到页面的顶部"><a href="#可以直接将超链接的href属性设置为-这样点击超链接以后页面不会发生跳转-反而会到页面的顶部" class="headerlink" title="可以直接将超链接的href属性设置为#,这样点击超链接以后页面不会发生跳转,反而会到页面的顶部,"></a>可以直接将超链接的href属性设置为#,这样点击超链接以后页面不会发生跳转,反而会到页面的顶部,</h3><h3 id="每一个属性都可以添加一个id属性-可以跳到页面的指定位置-只要将href属性设置为-目标元素的id值"><a href="#每一个属性都可以添加一个id属性-可以跳到页面的指定位置-只要将href属性设置为-目标元素的id值" class="headerlink" title="每一个属性都可以添加一个id属性,可以跳到页面的指定位置,只要将href属性设置为 #目标元素的id值"></a>每一个属性都可以添加一个id属性,可以跳到页面的指定位置,只要将href属性设置为 #目标元素的id值</h3><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">a</span> href = <span class="string">&quot;#zombie&quot;</span>&gt;去底部&lt;/<span class="keyword">a</span>&gt;</span><br><span class="line">.</span><br><span class="line"><span class="comment">.//javascript:;  什么都不会发生</span></span><br><span class="line">.</span><br><span class="line">&lt;<span class="keyword">a</span> id = <span class="string">&quot;botton&quot;</span> href = <span class="string">&quot;#&quot;</span>&gt;回到顶部&lt;/<span class="keyword">a</span>&gt;</span><br></pre></td></tr></table></figure><hr><hr><h1 id="图片标签"><a href="#图片标签" class="headerlink" title="图片标签"></a>图片标签</h1><h2 id="使用img标签来引入外部标签-img标签是一个自结果标签-属于替换元素"><a href="#使用img标签来引入外部标签-img标签是一个自结果标签-属于替换元素" class="headerlink" title="使用img标签来引入外部标签,img标签是一个自结果标签,属于替换元素"></a>使用img标签来引入外部标签,img标签是一个自结果标签,属于替换元素</h2><h3 id="src指定外部标签的路径-alt图片的描述-用于浏览器搜索引擎识别图片-类似id-id是唯一的-它是一类"><a href="#src指定外部标签的路径-alt图片的描述-用于浏览器搜索引擎识别图片-类似id-id是唯一的-它是一类" class="headerlink" title="src指定外部标签的路径;alt图片的描述,用于浏览器搜索引擎识别图片,类似id,id是唯一的,它是一类"></a>src指定外部标签的路径;alt图片的描述,用于浏览器搜索引擎识别图片,类似id,id是唯一的,它是一类</h3><h3 id="还有属性宽和高"><a href="#还有属性宽和高" class="headerlink" title="还有属性宽和高"></a>还有属性宽和高</h3><h3 id="lt-img-src-quot-图片地址-quot-alt-“图片描述”-gt"><a href="#lt-img-src-quot-图片地址-quot-alt-“图片描述”-gt" class="headerlink" title="&lt;img src = &quot;图片地址&quot; alt = “图片描述”&gt;"></a><code>&lt;img src = &quot;图片地址&quot;</code> alt = “图片描述”&gt;</h3><h2 id="图片的格式"><a href="#图片的格式" class="headerlink" title="图片的格式"></a>图片的格式</h2><h3 id="jpg-支持的颜色比较丰富-不支持动图和透明效果-一般用来显示照片"><a href="#jpg-支持的颜色比较丰富-不支持动图和透明效果-一般用来显示照片" class="headerlink" title="jpg:支持的颜色比较丰富,不支持动图和透明效果,一般用来显示照片"></a>jpg:支持的颜色比较丰富,不支持动图和透明效果,一般用来显示照片</h3><h3 id="gif-支持的颜色比较少-支持简单透明-支持动图-一般用于颜色单一的图片-动图"><a href="#gif-支持的颜色比较少-支持简单透明-支持动图-一般用于颜色单一的图片-动图" class="headerlink" title="gif:支持的颜色比较少,支持简单透明,支持动图,一般用于颜色单一的图片,动图"></a>gif:支持的颜色比较少,支持简单透明,支持动图,一般用于颜色单一的图片,动图</h3><h3 id="png-支持的颜色丰富-支持复杂透明-不支持动图-一般用于复杂透明和颜色丰富的图片"><a href="#png-支持的颜色丰富-支持复杂透明-不支持动图-一般用于复杂透明和颜色丰富的图片" class="headerlink" title="png:支持的颜色丰富,支持复杂透明,不支持动图,一般用于复杂透明和颜色丰富的图片"></a>png:支持的颜色丰富,支持复杂透明,不支持动图,一般用于复杂透明和颜色丰富的图片</h3><h3 id="webp-这种格式是谷歌新推出的专门用来表示网页图片的一种格式-小还具备以上有点"><a href="#webp-这种格式是谷歌新推出的专门用来表示网页图片的一种格式-小还具备以上有点" class="headerlink" title="webp:这种格式是谷歌新推出的专门用来表示网页图片的一种格式,小还具备以上有点"></a>webp:这种格式是谷歌新推出的专门用来表示网页图片的一种格式,小还具备以上有点</h3><h2 id="base64"><a href="#base64" class="headerlink" title="base64"></a>base64</h2><h3 id="将图片使用base64编码-这样可以将图片转换为字符-通过字符的形式将图片引入-用于图片与网页一起展现"><a href="#将图片使用base64编码-这样可以将图片转换为字符-通过字符的形式将图片引入-用于图片与网页一起展现" class="headerlink" title="将图片使用base64编码,这样可以将图片转换为字符,通过字符的形式将图片引入,用于图片与网页一起展现"></a>将图片使用base64编码,这样可以将图片转换为字符,通过字符的形式将图片引入,用于图片与网页一起展现</h3><hr><hr><h1 id="内联框架"><a href="#内联框架" class="headerlink" title="内联框架"></a>内联框架</h1><h2 id="用于向当前页面中引入一个页面-src-指定要引入的页面的路径-frameborder指定内联框架的边框"><a href="#用于向当前页面中引入一个页面-src-指定要引入的页面的路径-frameborder指定内联框架的边框" class="headerlink" title="用于向当前页面中引入一个页面 ; src 指定要引入的页面的路径;frameborder指定内联框架的边框"></a>用于向当前页面中引入一个页面 ; src 指定要引入的页面的路径;frameborder指定内联框架的边框</h2><h3 id="lt-iframe-src-quot-wwww-zhengtianhao-cn-quot-width-quot-500-quot-height-quot-500-quot-frameborder-quot-1-quot-gt-lt-iframe-gt"><a href="#lt-iframe-src-quot-wwww-zhengtianhao-cn-quot-width-quot-500-quot-height-quot-500-quot-frameborder-quot-1-quot-gt-lt-iframe-gt" class="headerlink" title="&lt;iframe src = &quot;wwww.zhengtianhao.cn&quot; width = &quot;500&quot; height = &quot;500&quot; frameborder=&quot;1&quot;&gt;&lt;/iframe&gt;"></a><code>&lt;iframe src = &quot;wwww.zhengtianhao.cn&quot; width = &quot;500&quot; height = &quot;500&quot; frameborder=&quot;1&quot;&gt;&lt;/iframe&gt;</code></h3><hr><hr><h1 id="音视频播放"><a href="#音视频播放" class="headerlink" title="音视频播放"></a>音视频播放</h1><h2 id="audio-标签用来向页面中引入一个外部的音频文件"><a href="#audio-标签用来向页面中引入一个外部的音频文件" class="headerlink" title="audio 标签用来向页面中引入一个外部的音频文件"></a>audio 标签用来向页面中引入一个外部的音频文件</h2><h2 id="音视频文件引入时-默认情况下不允许用户自己控制播放停止"><a href="#音视频文件引入时-默认情况下不允许用户自己控制播放停止" class="headerlink" title="音视频文件引入时,默认情况下不允许用户自己控制播放停止"></a>音视频文件引入时,默认情况下不允许用户自己控制播放停止</h2><h2 id="属性"><a href="#属性" class="headerlink" title="属性:"></a>属性:</h2><h2 id="controls是否允许用户控制播放"><a href="#controls是否允许用户控制播放" class="headerlink" title="controls是否允许用户控制播放;"></a>controls是否允许用户控制播放;</h2><h2 id="autoplay音频文件是否自动播放"><a href="#autoplay音频文件是否自动播放" class="headerlink" title="autoplay音频文件是否自动播放;"></a>autoplay音频文件是否自动播放;</h2><h2 id="loop循环播放"><a href="#loop循环播放" class="headerlink" title="loop循环播放;"></a>loop循环播放;</h2><h2 id="lt-audio-src-quot-相对路径-quot-controls-autoplay-gt-lt-audio-gt-有些不可以自动播放是浏览器的锅-大部分都对音乐取消自动播放"><a href="#lt-audio-src-quot-相对路径-quot-controls-autoplay-gt-lt-audio-gt-有些不可以自动播放是浏览器的锅-大部分都对音乐取消自动播放" class="headerlink" title="&lt;audio src = &quot;相对路径&quot; controls autoplay&gt;&lt;/audio&gt;//有些不可以自动播放是浏览器的锅(大部分都对音乐取消自动播放)"></a><code>&lt;audio src = &quot;相对路径&quot; controls autoplay&gt;&lt;/audio&gt;</code>//有些不可以自动播放是浏览器的锅(大部分都对音乐取消自动播放)</h2><h3 id="浏览器不支持mp3可以写ogg"><a href="#浏览器不支持mp3可以写ogg" class="headerlink" title="浏览器不支持mp3可以写ogg"></a>浏览器不支持mp3可以写ogg</h3><h2 id="video标签来向页面中引入一个视频"><a href="#video标签来向页面中引入一个视频" class="headerlink" title="video标签来向页面中引入一个视频"></a>video标签来向页面中引入一个视频</h2><h3 id="浏览器不支持mp4可以写webm"><a href="#浏览器不支持mp4可以写webm" class="headerlink" title="浏览器不支持mp4可以写webm"></a>浏览器不支持mp4可以写webm</h3><hr><hr><h1 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h1><hr><hr><h1 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h1><hr><hr>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/%E6%A0%B7%E5%BC%8F/">样式</category>
      
      
      <category domain="http://example.com/tags/%E5%AF%BC%E8%88%AA/">导航</category>
      
      <category domain="http://example.com/tags/%E5%88%86%E4%BA%AB/">分享</category>
      
      
      <comments>http://example.com/2021/06/11/HTML/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>JavaScript</title>
      <link>http://example.com/2021/06/11/JavaScript/</link>
      <guid>http://example.com/2021/06/11/JavaScript/</guid>
      <pubDate>Fri, 11 Jun 2021 02:34:36 GMT</pubDate>
      
      <description>&lt;hr&gt;
&lt;h1 id=&quot;JavaScript&quot;&gt;&lt;a href=&quot;#JavaScript&quot; class=&quot;headerlink&quot; title=&quot;JavaScript&quot;&gt;&lt;/a&gt;JavaScript&lt;/h1&gt;</description>
      
      
      
      <content:encoded><![CDATA[<hr><h1 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h1><span id="more"></span><h2 id="1-1JavaScript介绍"><a href="#1-1JavaScript介绍" class="headerlink" title="1.1JavaScript介绍"></a>1.1JavaScript介绍</h2><h3 id="运行在客户端的脚本语言"><a href="#运行在客户端的脚本语言" class="headerlink" title="运行在客户端的脚本语言"></a>运行在客户端的脚本语言</h3><h3 id="脚本语言不需要编译-解释型语言-Java是编译型语言"><a href="#脚本语言不需要编译-解释型语言-Java是编译型语言" class="headerlink" title="脚本语言不需要编译(解释型语言,Java是编译型语言)"></a>脚本语言不需要编译(解释型语言,Java是编译型语言)</h3><h3 id="也可以基于Node-js进行服务端编程"><a href="#也可以基于Node-js进行服务端编程" class="headerlink" title="也可以基于Node.js进行服务端编程"></a>也可以基于Node.js进行服务端编程</h3><h2 id="1-2浏览器执行JS简介"><a href="#1-2浏览器执行JS简介" class="headerlink" title="1.2浏览器执行JS简介"></a>1.2浏览器执行JS简介</h2><h3 id="渲染引擎-用来解析HTML与CSS-俗称内核-例如chrome浏览器的blink"><a href="#渲染引擎-用来解析HTML与CSS-俗称内核-例如chrome浏览器的blink" class="headerlink" title="渲染引擎:用来解析HTML与CSS,俗称内核,例如chrome浏览器的blink"></a>渲染引擎:用来解析HTML与CSS,俗称内核,例如chrome浏览器的blink</h3><h3 id="JS引擎-也称为JS解释器-用来读取网页中的JavaScript代码-对其处理后运行-例如V8"><a href="#JS引擎-也称为JS解释器-用来读取网页中的JavaScript代码-对其处理后运行-例如V8" class="headerlink" title="JS引擎:也称为JS解释器,用来读取网页中的JavaScript代码,对其处理后运行,例如V8"></a>JS引擎:也称为JS解释器,用来读取网页中的JavaScript代码,对其处理后运行,例如V8</h3><h3 id="一句一句解释转换机器语言"><a href="#一句一句解释转换机器语言" class="headerlink" title="一句一句解释转换机器语言"></a>一句一句解释转换机器语言</h3><h2 id="1-3JS的组成"><a href="#1-3JS的组成" class="headerlink" title="1.3JS的组成"></a>1.3JS的组成</h2><h3 id="ECMAScript-语法规则"><a href="#ECMAScript-语法规则" class="headerlink" title="ECMAScript:语法规则"></a>ECMAScript:语法规则</h3><h3 id="DOM-页面文档对象模型"><a href="#DOM-页面文档对象模型" class="headerlink" title="DOM:页面文档对象模型"></a>DOM:页面文档对象模型</h3><h3 id="BOM-浏览器对象模型"><a href="#BOM-浏览器对象模型" class="headerlink" title="BOM:浏览器对象模型"></a>BOM:浏览器对象模型</h3><h2 id="1-4书写"><a href="#1-4书写" class="headerlink" title="1.4书写"></a>1.4书写</h2><h3 id="行内式-元素内部"><a href="#行内式-元素内部" class="headerlink" title="行内式:元素内部"></a>行内式:元素内部</h3><h3 id="内嵌式"><a href="#内嵌式" class="headerlink" title="内嵌式:"></a>内嵌式:</h3><h4 id="lt-script-gt-lt-script-gt"><a href="#lt-script-gt-lt-script-gt" class="headerlink" title="&lt;script&gt;.......&lt;/script&gt;"></a><code>&lt;script&gt;.......&lt;/script&gt;</code></h4><h3 id="外部式-新建JS文件-直接写JS代码"><a href="#外部式-新建JS文件-直接写JS代码" class="headerlink" title="外部式:新建JS文件,直接写JS代码."></a>外部式:新建JS文件,直接写JS代码.</h3><h4 id="lt-script-src-quot-xinjian-js-quot-gt-lt-script-gt"><a href="#lt-script-src-quot-xinjian-js-quot-gt-lt-script-gt" class="headerlink" title="&lt;script src=&quot;xinjian.js&quot;&gt;&lt;/script&gt;"></a><code>&lt;script src=&quot;xinjian.js&quot;&gt;&lt;/script&gt;</code></h4><h2 id="1-5注释"><a href="#1-5注释" class="headerlink" title="1,5注释"></a>1,5注释</h2><h3 id="单行-多行"><a href="#单行-多行" class="headerlink" title="//单行    /*  */多行"></a>//单行    /*  */多行</h3><h2 id="1-6输入输出"><a href="#1-6输入输出" class="headerlink" title="1.6输入输出"></a>1.6输入输出</h2><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><h4 id="lt-script-gt-prompt-39-第一种输入框-39-lt-script-gt"><a href="#lt-script-gt-prompt-39-第一种输入框-39-lt-script-gt" class="headerlink" title="&lt;script&gt; prompt(&#39;第一种输入框&#39;)&lt;/script&gt;"></a><code>&lt;script&gt; prompt(&#39;第一种输入框&#39;)&lt;/script&gt;</code></h4><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><h4 id="lt-script-gt-alert-39-第一种警示框输出-39-lt-script-gt"><a href="#lt-script-gt-alert-39-第一种警示框输出-39-lt-script-gt" class="headerlink" title="&lt;script&gt;alert(&#39;第一种警示框输出&#39;)&lt;/script&gt;"></a><code>&lt;script&gt;alert(&#39;第一种警示框输出&#39;)&lt;/script&gt;</code></h4><h4 id="lt-script-gt-console-log-39-第二种控制台打印输出-39-lt-script-gt"><a href="#lt-script-gt-console-log-39-第二种控制台打印输出-39-lt-script-gt" class="headerlink" title="&lt;script&gt; console.log(&#39;第二种控制台打印输出&#39;)&lt;/script&gt;"></a><code>&lt;script&gt; console.log(&#39;第二种控制台打印输出&#39;)&lt;/script&gt;</code></h4><hr><hr><h1 id="JavaScript变量"><a href="#JavaScript变量" class="headerlink" title="JavaScript变量"></a>JavaScript变量</h1><h2 id="1-变量概述"><a href="#1-变量概述" class="headerlink" title="1.变量概述"></a>1.变量概述</h2><h3 id="1-1什么是变量"><a href="#1-1什么是变量" class="headerlink" title="1.1什么是变量"></a>1.1什么是变量</h3><h4 id="用于存放数据的容器-变量是内存中的空间"><a href="#用于存放数据的容器-变量是内存中的空间" class="headerlink" title="用于存放数据的容器.变量是内存中的空间"></a>用于存放数据的容器.变量是内存中的空间</h4><h3 id="1-2变量的使用"><a href="#1-2变量的使用" class="headerlink" title="1.2变量的使用"></a>1.2变量的使用</h3><h4 id="声明变量并赋值-变量初始化"><a href="#声明变量并赋值-变量初始化" class="headerlink" title="声明变量并赋值(变量初始化)"></a>声明变量并赋值(变量初始化)</h4><h5 id="lt-script-gt-var-age-21-lt-script-gt"><a href="#lt-script-gt-var-age-21-lt-script-gt" class="headerlink" title="&lt;script&gt;var age = 21;&lt;/script&gt;"></a><code>&lt;script&gt;var age = 21;&lt;/script&gt;</code></h5><h5 id="lt-script-gt-var-age-prompt-39-请输入你的年龄-39-lt-script-gt"><a href="#lt-script-gt-var-age-prompt-39-请输入你的年龄-39-lt-script-gt" class="headerlink" title="&lt;script&gt;var age = prompt(&#39;请输入你的年龄&#39;)&lt;/script&gt;"></a><code>&lt;script&gt;var age = prompt(&#39;请输入你的年龄&#39;)&lt;/script&gt;</code></h5><h5 id="声明不赋值-undefined"><a href="#声明不赋值-undefined" class="headerlink" title="声明不赋值  undefined"></a>声明不赋值  undefined</h5><h5 id="不声明-直接使用-会变成全局变量-不推荐"><a href="#不声明-直接使用-会变成全局变量-不推荐" class="headerlink" title="不声明,直接使用,会变成全局变量,不推荐"></a>不声明,直接使用,会变成全局变量,不推荐</h5><hr><hr><h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><h2 id="1-数据类型简介"><a href="#1-数据类型简介" class="headerlink" title="1.数据类型简介"></a>1.数据类型简介</h2><h3 id="1-1为什么需要数据类型"><a href="#1-1为什么需要数据类型" class="headerlink" title="1.1为什么需要数据类型"></a>1.1为什么需要数据类型</h3><h4 id="更好的利用内存"><a href="#更好的利用内存" class="headerlink" title="更好的利用内存"></a>更好的利用内存</h4><h3 id="1-2变量的数据类型"><a href="#1-2变量的数据类型" class="headerlink" title="1.2变量的数据类型"></a>1.2变量的数据类型</h3><h4 id="JavaScript是一种弱类型或动态语言-它可以根据JS引擎自动判断-号右边变量值的数据类型来判断-JavaScript拥有动态类型-同时也意味着相同的变量可用作不同的类型"><a href="#JavaScript是一种弱类型或动态语言-它可以根据JS引擎自动判断-号右边变量值的数据类型来判断-JavaScript拥有动态类型-同时也意味着相同的变量可用作不同的类型" class="headerlink" title="JavaScript是一种弱类型或动态语言;它可以根据JS引擎自动判断=号右边变量值的数据类型来判断;JavaScript拥有动态类型,同时也意味着相同的变量可用作不同的类型."></a>JavaScript是一种弱类型或动态语言;它可以根据JS引擎自动判断=号右边变量值的数据类型来判断;JavaScript拥有动态类型,同时也意味着相同的变量可用作不同的类型.</h4><h4 id="lt-script-gt-var-x-22-x-39-zombie-39-lt-script-gt"><a href="#lt-script-gt-var-x-22-x-39-zombie-39-lt-script-gt" class="headerlink" title=" &lt;script&gt;var x = 22;x = &#39;zombie&#39;&lt;/script&gt;"></a><code> &lt;script&gt;var x = 22;x = &#39;zombie&#39;&lt;/script&gt;</code></h4><h2 id="2-数值类型"><a href="#2-数值类型" class="headerlink" title="2.数值类型"></a>2.数值类型</h2><h3 id="数值型最大值"><a href="#数值型最大值" class="headerlink" title="数值型最大值"></a>数值型最大值</h3><h4 id="lt-script-gt-console-log-Number-MAX-VALUE-lt-script-gt"><a href="#lt-script-gt-console-log-Number-MAX-VALUE-lt-script-gt" class="headerlink" title="&lt;script&gt;console.log(Number.MAX_VALUE);&lt;/script&gt;"></a><code>&lt;script&gt;console.log(Number.MAX_VALUE);&lt;/script&gt;</code></h4><h3 id="数值型最小值"><a href="#数值型最小值" class="headerlink" title="数值型最小值"></a>数值型最小值</h3><h4 id="lt-script-gt-console-log-Number-MIN-VALUE-lt-script-gt"><a href="#lt-script-gt-console-log-Number-MIN-VALUE-lt-script-gt" class="headerlink" title="&lt;script&gt;console.log(Number.MIN_VALUE);&lt;/script&gt;"></a><code>&lt;script&gt;console.log(Number.MIN_VALUE);&lt;/script&gt;</code></h4><h3 id="数值型无穷大"><a href="#数值型无穷大" class="headerlink" title="数值型无穷大"></a>数值型无穷大</h3><h4 id="lt-script-gt-console-log-Number-MAX-VALUE-2-lt-script-gt-Infinity无穷大"><a href="#lt-script-gt-console-log-Number-MAX-VALUE-2-lt-script-gt-Infinity无穷大" class="headerlink" title="&lt;script&gt;console.log(Number.MAX_VALUE*2);&lt;/script&gt; //Infinity无穷大"></a><code>&lt;script&gt;console.log(Number.MAX_VALUE*2);&lt;/script&gt;</code> //Infinity无穷大</h4><h3 id="数值型无穷小"><a href="#数值型无穷小" class="headerlink" title="数值型无穷小"></a>数值型无穷小</h3><h4 id="lt-script-gt-console-log-Number-MAX-VALUE-2-lt-script-gt-Infinity无穷小"><a href="#lt-script-gt-console-log-Number-MAX-VALUE-2-lt-script-gt-Infinity无穷小" class="headerlink" title="&lt;script&gt;console.log(-Number.MAX_VALUE*2);&lt;/script&gt; //-Infinity无穷小"></a><code>&lt;script&gt;console.log(-Number.MAX_VALUE*2);&lt;/script&gt;</code> //-Infinity无穷小</h4><h4 id="NaN表示非数字"><a href="#NaN表示非数字" class="headerlink" title="NaN表示非数字"></a>NaN表示非数字</h4><h4 id="验证-lt-script-gt-console-log-isNaN-22-lt-script-gt-false"><a href="#验证-lt-script-gt-console-log-isNaN-22-lt-script-gt-false" class="headerlink" title="验证:&lt;script&gt;console.log(isNaN(22));&lt;/script&gt; // false"></a>验证:<code>&lt;script&gt;console.log(isNaN(22));&lt;/script&gt;</code> // false</h4><h2 id="3-字符串类型"><a href="#3-字符串类型" class="headerlink" title="3.字符串类型"></a>3.字符串类型</h2><h3 id="3-1嵌套"><a href="#3-1嵌套" class="headerlink" title="3.1嵌套"></a>3.1嵌套</h3><h4 id="外双内单或外单内双"><a href="#外双内单或外单内双" class="headerlink" title="外双内单或外单内双"></a>外双内单或外单内双</h4><h3 id="3-2字符串转义字符-得用反斜杠"><a href="#3-2字符串转义字符-得用反斜杠" class="headerlink" title="3.2字符串转义字符,得用反斜杠\"></a>3.2字符串转义字符,得用反斜杠\</h3><h3 id="3-3检测获取字符串的长度"><a href="#3-3检测获取字符串的长度" class="headerlink" title="3.3检测获取字符串的长度"></a>3.3检测获取字符串的长度</h3><h4 id="lt-script-gt-console-log-str-length-lt-script-gt"><a href="#lt-script-gt-console-log-str-length-lt-script-gt" class="headerlink" title="&lt;script&gt;console.log(str.length);&lt;/script&gt;"></a><code>&lt;script&gt;console.log(str.length);&lt;/script&gt;</code></h4><h3 id="3-4字符串拼接-字符相连-数值相加"><a href="#3-4字符串拼接-字符相连-数值相加" class="headerlink" title="3.4字符串拼接(字符相连,数值相加)"></a>3.4字符串拼接(字符相连,数值相加)</h3><h4 id="lt-script-gt-console-log-39-zombie-39-39-zheng-39-39-21-39-lt-script-gt"><a href="#lt-script-gt-console-log-39-zombie-39-39-zheng-39-39-21-39-lt-script-gt" class="headerlink" title="&lt;script&gt;console.log(&#39;zombie&#39; + &#39;zheng&#39; + &#39;21&#39;)&lt;/script&gt;"></a><code>&lt;script&gt;console.log(&#39;zombie&#39; + &#39;zheng&#39; + &#39;21&#39;)&lt;/script&gt;</code></h4><h3 id="3-5-null空值-undefined未定义的-跟数字相加就是数字NaN-Boolean-false-true-相加当0-1"><a href="#3-5-null空值-undefined未定义的-跟数字相加就是数字NaN-Boolean-false-true-相加当0-1" class="headerlink" title="3.5 null空值;undefined未定义的:跟数字相加就是数字NaN;Boolean:false,true,相加当0,1"></a>3.5 null空值;undefined未定义的:跟数字相加就是数字NaN;Boolean:false,true,相加当0,1</h3><h2 id="4-获取变量数据类型"><a href="#4-获取变量数据类型" class="headerlink" title="4.获取变量数据类型"></a>4.获取变量数据类型</h2><h3 id="4-1获取检测变量的数据类型"><a href="#4-1获取检测变量的数据类型" class="headerlink" title="4.1获取检测变量的数据类型"></a>4.1获取检测变量的数据类型</h3><h4 id="lt-script-gt-var-num-21-console-log-typeof-num-lt-script-gt"><a href="#lt-script-gt-var-num-21-console-log-typeof-num-lt-script-gt" class="headerlink" title="&lt;script&gt;var num = 21;console.log(typeof num);&lt;/script&gt;"></a><code>&lt;script&gt;var num = 21;console.log(typeof num);&lt;/script&gt;</code></h4><h4 id="prompt-取过来的值是字符型的"><a href="#prompt-取过来的值是字符型的" class="headerlink" title="prompt 取过来的值是字符型的"></a>prompt 取过来的值是字符型的</h4><h3 id="4-2字面量"><a href="#4-2字面量" class="headerlink" title="4.2字面量"></a>4.2字面量</h3><h2 id="5-数据类型转换"><a href="#5-数据类型转换" class="headerlink" title="5.数据类型转换"></a>5.数据类型转换</h2><h3 id="转换为字符串"><a href="#转换为字符串" class="headerlink" title="转换为字符串"></a>转换为字符串</h3><h4 id="lt-script-gt-var-num-21-var-str-num-toString-lt-script-gt"><a href="#lt-script-gt-var-num-21-var-str-num-toString-lt-script-gt" class="headerlink" title="&lt;script&gt;var num = 21;var str = num.toString();&lt;/script&gt;"></a><code>&lt;script&gt;var num = 21;var str = num.toString();&lt;/script&gt;</code></h4><h4 id="lt-script-gt-var-num-21-cnosole-log-String-num-lt-script-gt"><a href="#lt-script-gt-var-num-21-cnosole-log-String-num-lt-script-gt" class="headerlink" title="&lt;script&gt;var num = 21;cnosole.log(String(num));&lt;/script&gt;"></a><code>&lt;script&gt;var num = 21;cnosole.log(String(num));&lt;/script&gt;</code></h4><h4 id="lt-script-gt-cnosole-log-num-39-39-隐式转换-lt-script-gt"><a href="#lt-script-gt-cnosole-log-num-39-39-隐式转换-lt-script-gt" class="headerlink" title="&lt;script&gt;cnosole.log(num + &#39;&#39;);//隐式转换&lt;/script&gt;"></a><code>&lt;script&gt;cnosole.log(num + &#39;&#39;);//隐式转换&lt;/script&gt;</code></h4><h3 id="转换为数字型"><a href="#转换为数字型" class="headerlink" title="转换为数字型"></a>转换为数字型</h3><h4 id="lt-script-gt-var-age-39-21-39-console-log-parseInt-age-lt-script-gt-小数会被取整-parseFloat就是小数了-数字开头会只保留数字-后面不是数字的字符删除"><a href="#lt-script-gt-var-age-39-21-39-console-log-parseInt-age-lt-script-gt-小数会被取整-parseFloat就是小数了-数字开头会只保留数字-后面不是数字的字符删除" class="headerlink" title="&lt;script&gt;var age = &#39;21&#39;;console.log(parseInt(age))&lt;/script&gt;//小数会被取整,parseFloat就是小数了.数字开头会只保留数字,后面不是数字的字符删除."></a><code>&lt;script&gt;var age = &#39;21&#39;;console.log(parseInt(age))&lt;/script&gt;</code>//小数会被取整,parseFloat就是小数了.数字开头会只保留数字,后面不是数字的字符删除.</h4><h4 id="lt-script-gt-var-str-39-21-39-console-log-Number-str-lt-script-gt"><a href="#lt-script-gt-var-str-39-21-39-console-log-Number-str-lt-script-gt" class="headerlink" title="&lt;script&gt;var str = &#39;21&#39;;console.log(Number(str));&lt;/script&gt;"></a><code>&lt;script&gt;var str = &#39;21&#39;;console.log(Number(str));&lt;/script&gt;</code></h4><h4 id="lt-script-gt-console-log-39-21-39-0-lt-script-gt-隐式转换-都可"><a href="#lt-script-gt-console-log-39-21-39-0-lt-script-gt-隐式转换-都可" class="headerlink" title="&lt;script&gt;console.log(&#39;21&#39; - 0);&lt;/script&gt;//隐式转换 - * /都可"></a><code>&lt;script&gt;console.log(&#39;21&#39; - 0);&lt;/script&gt;</code>//隐式转换 - * /都可</h4><h3 id="转换为布尔型"><a href="#转换为布尔型" class="headerlink" title="转换为布尔型"></a>转换为布尔型</h3><h3 id="‘’-0-NaN-null-undefined-都是false"><a href="#‘’-0-NaN-null-undefined-都是false" class="headerlink" title="‘’  0  NaN  null undefined 都是false"></a>‘’  0  NaN  null undefined 都是false</h3><h4 id="lt-script-gt-console-log-Boolean-0-lt-script-gt"><a href="#lt-script-gt-console-log-Boolean-0-lt-script-gt" class="headerlink" title="&lt;script&gt;console.log(Boolean(0));&lt;/script&gt;"></a><code>&lt;script&gt;console.log(Boolean(0));&lt;/script&gt;</code></h4><h2 id="标识符不能是关键字和保留字"><a href="#标识符不能是关键字和保留字" class="headerlink" title="标识符不能是关键字和保留字"></a>标识符不能是关键字和保留字</h2><hr><hr><h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><h2 id="数组的创建方式"><a href="#数组的创建方式" class="headerlink" title="数组的创建方式"></a>数组的创建方式</h2><h3 id="利用new创建数组"><a href="#利用new创建数组" class="headerlink" title="利用new创建数组"></a>利用new创建数组</h3><h3 id="var-arr-new-Array"><a href="#var-arr-new-Array" class="headerlink" title="var arr = new Array();"></a><code>var arr = new Array();</code></h3><h3 id="利用数组字面量创建数组"><a href="#利用数组字面量创建数组" class="headerlink" title="利用数组字面量创建数组"></a>利用数组字面量创建数组</h3><h3 id="var-array"><a href="#var-array" class="headerlink" title="var array = [];"></a><code>var array = [];</code></h3><h3 id="var-array-1-2-zombie"><a href="#var-array-1-2-zombie" class="headerlink" title="var array = [1,2,zombie];"></a><code>var array = [1,2,zombie];</code></h3><h2 id="获取数组元素"><a href="#获取数组元素" class="headerlink" title="获取数组元素"></a>获取数组元素</h2><h3 id="索引号从0开始"><a href="#索引号从0开始" class="headerlink" title="索引号从0开始"></a>索引号从0开始</h3><h3 id="console-log-array-2-没有的话-输出undefined"><a href="#console-log-array-2-没有的话-输出undefined" class="headerlink" title="console.log(array[2]);//没有的话,输出undefined"></a><code>console.log(array[2]);</code>//没有的话,输出undefined</h3><h2 id="数组遍历"><a href="#数组遍历" class="headerlink" title="数组遍历"></a>数组遍历</h2><h3 id="利用循环"><a href="#利用循环" class="headerlink" title="利用循环"></a>利用循环</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> array = [<span class="number">1</span>,<span class="number">2</span>,zombie];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; <span class="number">3</span>;i++)&#123;</span><br><span class="line"><span class="built_in">console</span>.log(array[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(array.length);<span class="comment">//获取数组长度</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数组求和及平均值</span></span><br><span class="line"><span class="keyword">var</span> array = [<span class="number">1</span>,<span class="number">5</span>,<span class="number">24</span>,<span class="number">64</span>];</span><br><span class="line"><span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> average = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; array.length;i++)&#123;</span><br><span class="line">sum+=array[i];</span><br><span class="line">&#125;</span><br><span class="line">average = sum / array.length;</span><br><span class="line"><span class="built_in">console</span>.log(sum,average);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数组最大值</span></span><br><span class="line"><span class="keyword">var</span> array = [<span class="number">1</span>,<span class="number">65</span>,<span class="number">34</span>,<span class="number">2</span>,<span class="number">78</span>];</span><br><span class="line"><span class="keyword">var</span> max = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">1</span>;i&lt;array.length;;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(array[i]&gt;max)&#123;</span><br><span class="line">max = array[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(max);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//把数组转换为分割字符串</span></span><br><span class="line"><span class="keyword">var</span> array = [<span class="string">&#x27;zheng&#x27;</span>,<span class="string">&#x27;zombie&#x27;</span>,<span class="string">&#x27;tian&#x27;</span>,<span class="string">&#x27;hao&#x27;</span>];</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; array.length;i++)&#123;</span><br><span class="line">atr += array[i]+<span class="string">&#x27;|&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(str);</span><br></pre></td></tr></table></figure><h2 id="数组中新增元素"><a href="#数组中新增元素" class="headerlink" title="数组中新增元素"></a>数组中新增元素</h2><h3 id="可以通过修改length属性长度来实现数组扩容"><a href="#可以通过修改length属性长度来实现数组扩容" class="headerlink" title="可以通过修改length属性长度来实现数组扩容"></a>可以通过修改length属性长度来实现数组扩容</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> array = [<span class="string">&#x27;zheng&#x27;</span>,<span class="string">&#x27;zombie&#x27;</span>];</span><br><span class="line">array.length = <span class="number">3</span>;</span><br></pre></td></tr></table></figure><h3 id="修改索引号新增数组元素"><a href="#修改索引号新增数组元素" class="headerlink" title="修改索引号新增数组元素"></a>修改索引号新增数组元素</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> array = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>];</span><br><span class="line">array[<span class="number">3</span>] = <span class="number">3</span>;<span class="comment">//追加</span></span><br><span class="line">array[<span class="number">0</span>] = <span class="number">7</span>;<span class="comment">//替换</span></span><br><span class="line"><span class="built_in">console</span>.log(array);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//筛选数组:将数组[2,0,6,1,77,0,52,0,25,7]中大于等于10的元素选出来,加入新数组</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">2</span>,<span class="number">0</span>,<span class="number">6</span>,<span class="number">1</span>,<span class="number">77</span>,<span class="number">0</span>,<span class="number">52</span>,<span class="number">0</span>,<span class="number">25</span>,<span class="number">7</span>];</span><br><span class="line"><span class="keyword">var</span> newArr = [];</span><br><span class="line"><span class="comment">//第二种筛选 newArr.length是0</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; arr.length;i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(arr[i]&gt;<span class="number">1</span>=<span class="number">10</span>)&#123;</span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">var</span> j = <span class="number">0</span>;;j++)&#123;</span><br><span class="line">           newArr[j] = arr[i];</span><br><span class="line">           <span class="comment">//newArr[newArr.length] = arr[i];</span></span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(newArr);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//删除指定的数组元素:将数组[20,78,24,3,7,1,14]中的1去掉成一个新数组</span></span><br><span class="line"><span class="keyword">var</span> array = [<span class="number">20</span>,<span class="number">78</span>,<span class="number">24</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">1</span>,<span class="number">14</span>];</span><br><span class="line"><span class="keyword">var</span> newArr = [];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; array.length;i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(array[i] !== <span class="number">0</span>)&#123;</span><br><span class="line">        newArr[newArr.length] = arr[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(newArr);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//翻转数组</span></span><br><span class="line"><span class="keyword">var</span> array = [<span class="string">&#x27;zombie&#x27;</span>,<span class="string">&#x27;hao&#x27;</span>,<span class="string">&#x27;tian&#x27;</span>,<span class="string">&#x27;zheng&#x27;</span>];</span><br><span class="line"><span class="keyword">var</span> newArr = [];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = array.length - <span class="number">1</span>;i &gt;= <span class="number">0</span>;i--)&#123;</span><br><span class="line">    newArr[newArr.length] = array[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(newArr);</span><br></pre></td></tr></table></figure><hr><hr><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="代码重复使用-可以用函数封装-然后调用就好"><a href="#代码重复使用-可以用函数封装-然后调用就好" class="headerlink" title="代码重复使用,可以用函数封装,然后调用就好"></a>代码重复使用,可以用函数封装,然后调用就好</h2><h2 id="函数使用分为两大步-声明函数和调用函数"><a href="#函数使用分为两大步-声明函数和调用函数" class="headerlink" title="函数使用分为两大步:声明函数和调用函数"></a>函数使用分为两大步:声明函数和调用函数</h2><h3 id="声明函数"><a href="#声明函数" class="headerlink" title="声明函数"></a>声明函数</h3><h3 id="function-函数名"><a href="#function-函数名" class="headerlink" title="function 函数名(){}"></a><code>function 函数名()&#123;&#125;</code></h3><h3 id="调用函数"><a href="#调用函数" class="headerlink" title="调用函数"></a>调用函数</h3><h3 id="函数名-不要忘记小括号"><a href="#函数名-不要忘记小括号" class="headerlink" title="函数名();不要忘记小括号"></a>函数名();不要忘记小括号</h3><h2 id="函数的参数"><a href="#函数的参数" class="headerlink" title="函数的参数"></a>函数的参数</h2><h3 id="function-函数名-形参1-形参2-形参是接收实参的"><a href="#function-函数名-形参1-形参2-形参是接收实参的" class="headerlink" title="function 函数名(形参1,形参2.....){}//形参是接收实参的"></a><code>function 函数名(形参1,形参2.....)&#123;&#125;</code>//形参是接收实参的</h3><h3 id="调用时-函数名-实参1-实参2…"><a href="#调用时-函数名-实参1-实参2…" class="headerlink" title="调用时:函数名(实参1,实参2….);"></a>调用时:函数名(实参1,实参2….);</h3><h3 id="java形参实参必须匹配-JavaScript实参多于形参-多余的会忽略-小于时-少的那个会是undefined"><a href="#java形参实参必须匹配-JavaScript实参多于形参-多余的会忽略-小于时-少的那个会是undefined" class="headerlink" title="java形参实参必须匹配,JavaScript实参多于形参,多余的会忽略,小于时,少的那个会是undefined"></a>java形参实参必须匹配,JavaScript实参多于形参,多余的会忽略,小于时,少的那个会是undefined</h3><h2 id="函数的返回值"><a href="#函数的返回值" class="headerlink" title="函数的返回值"></a>函数的返回值</h2><h3 id="函数只是实现某种功能-最终的结果需要返回给函数的调用者函数名-通过return实现的"><a href="#函数只是实现某种功能-最终的结果需要返回给函数的调用者函数名-通过return实现的" class="headerlink" title="函数只是实现某种功能,最终的结果需要返回给函数的调用者函数名(),通过return实现的"></a>函数只是实现某种功能,最终的结果需要返回给函数的调用者函数名(),通过return实现的</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//利用函数求任意一个数组中的最大值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getArrayMax</span>(<span class="params">array</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> max = array[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">1</span>;i &lt;= array.length;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(array[i] &gt; max)&#123;</span><br><span class="line">            max = arr[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> res = getArrayMax([<span class="number">4</span>,<span class="number">5</span>,<span class="number">56</span>,<span class="number">34</span>,<span class="number">71</span>,<span class="number">12</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(res);</span><br></pre></td></tr></table></figure><h3 id="return终止函数-它后面的函数不会被执行-只能返回一个值-以最后一个值为准-如果想返回多个可以返回数组呀"><a href="#return终止函数-它后面的函数不会被执行-只能返回一个值-以最后一个值为准-如果想返回多个可以返回数组呀" class="headerlink" title="return终止函数:它后面的函数不会被执行,只能返回一个值(以最后一个值为准),如果想返回多个可以返回数组呀"></a>return终止函数:它后面的函数不会被执行,只能返回一个值(以最后一个值为准),如果想返回多个可以返回数组呀</h3><h3 id="函数如果有return-则返回return后面的值-没有return就返回undefined"><a href="#函数如果有return-则返回return后面的值-没有return就返回undefined" class="headerlink" title="函数如果有return,则返回return后面的值,没有return就返回undefined"></a>函数如果有return,则返回return后面的值,没有return就返回undefined</h3><h3 id="break-continue-return的区别"><a href="#break-continue-return的区别" class="headerlink" title="break,continue,return的区别"></a>break,continue,return的区别</h3><h4 id="break-结束当前循环"><a href="#break-结束当前循环" class="headerlink" title="break:结束当前循环"></a>break:结束当前循环</h4><h4 id="continue-跳出本次循环-继续执行下次循环"><a href="#continue-跳出本次循环-继续执行下次循环" class="headerlink" title="continue:跳出本次循环,继续执行下次循环"></a>continue:跳出本次循环,继续执行下次循环</h4><h4 id="return-不仅可以推出循环-还能够返回return语句中的值-同时还可以结束当前的函数体中的代码"><a href="#return-不仅可以推出循环-还能够返回return语句中的值-同时还可以结束当前的函数体中的代码" class="headerlink" title="return:不仅可以推出循环,还能够返回return语句中的值,同时还可以结束当前的函数体中的代码"></a>return:不仅可以推出循环,还能够返回return语句中的值,同时还可以结束当前的函数体中的代码</h4><hr><hr><h1 id="arguments的使用"><a href="#arguments的使用" class="headerlink" title="arguments的使用"></a>arguments的使用</h1><h2 id="当我们不知道有多少个参数传递的时候-可以用arguments来获取-在javascript中-arguments实际上它是当前函数的一个内置对象-所有函数都内置了一个arguments对象-arguments对象-arguments对象中存储了传递的所有实参"><a href="#当我们不知道有多少个参数传递的时候-可以用arguments来获取-在javascript中-arguments实际上它是当前函数的一个内置对象-所有函数都内置了一个arguments对象-arguments对象-arguments对象中存储了传递的所有实参" class="headerlink" title="当我们不知道有多少个参数传递的时候,可以用arguments来获取,在javascript中,arguments实际上它是当前函数的一个内置对象,所有函数都内置了一个arguments对象,arguments对象,arguments对象中存储了传递的所有实参."></a>当我们不知道有多少个参数传递的时候,可以用arguments来获取,在javascript中,arguments实际上它是当前函数的一个内置对象,所有函数都内置了一个arguments对象,arguments对象,arguments对象中存储了传递的所有实参.</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">arguments</span>);<span class="comment">//里面存取了所有传递过来的实参</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">arguments</span>.length);</span><br><span class="line">    <span class="comment">//可以按照遍历数组方式来遍历arguments</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i&lt;<span class="built_in">arguments</span>.length;i++)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(argumrnts[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">fn(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line"><span class="comment">//伪数组</span></span><br><span class="line"><span class="comment">//1.具有数组的length属性</span></span><br><span class="line"><span class="comment">//2.按照索引方式存储</span></span><br><span class="line"><span class="comment">//3.没有真正数组的方法,push()等</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//利用函数求任意个数的最大值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getMax</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> max = <span class="built_in">arguments</span>[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">1</span>;i &lt; <span class="built_in">arguments</span>.length;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">arguments</span>[i] &gt; max)&#123;</span><br><span class="line">max = <span class="built_in">arguments</span>[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(getMax(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>));</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//利用函数封装方式,翻转任意一个数组</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reverse</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> newArr = [];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = arr.length-<span class="number">1</span>;i &gt;= <span class="number">0</span>;i++)&#123;</span><br><span class="line">newArr[newArr.length] = arr[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> newArr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr1 = reverse([<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">9</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(arr1);</span><br></pre></td></tr></table></figure><h2 id="函数可以调用另外一个函数"><a href="#函数可以调用另外一个函数" class="headerlink" title="函数可以调用另外一个函数"></a>函数可以调用另外一个函数</h2><h3 id="函数可以调用另外一个函数-1"><a href="#函数可以调用另外一个函数-1" class="headerlink" title="函数可以调用另外一个函数"></a>函数可以调用另外一个函数</h3><h2 id="另一种-函数表达式"><a href="#另一种-函数表达式" class="headerlink" title="另一种:函数表达式"></a>另一种:函数表达式</h2><h3 id="var-变量名-function-匿名函数"><a href="#var-变量名-function-匿名函数" class="headerlink" title="var 变量名 = function(){}//匿名函数"></a><code>var 变量名 = function()&#123;&#125;</code>//匿名函数</h3><hr><hr><h1 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h1><h2 id="代码名字在某个范围内起作用和效果"><a href="#代码名字在某个范围内起作用和效果" class="headerlink" title="代码名字在某个范围内起作用和效果"></a>代码名字在某个范围内起作用和效果</h2><h2 id="目的时提高可靠性-和名字的冲突"><a href="#目的时提高可靠性-和名字的冲突" class="headerlink" title="目的时提高可靠性,和名字的冲突"></a>目的时提高可靠性,和名字的冲突</h2><h3 id="全局作用域-整个script标签或者一个单独的js文件"><a href="#全局作用域-整个script标签或者一个单独的js文件" class="headerlink" title="全局作用域:整个script标签或者一个单独的js文件"></a>全局作用域:整个script标签或者一个单独的js文件</h3><h3 id="局部作用域-函数作用域-在函数内部就是局部作用域"><a href="#局部作用域-函数作用域-在函数内部就是局部作用域" class="headerlink" title="局部作用域(函数作用域):在函数内部就是局部作用域"></a>局部作用域(函数作用域):在函数内部就是局部作用域</h3><hr><hr><h1 id="变量的作用域"><a href="#变量的作用域" class="headerlink" title="变量的作用域"></a>变量的作用域</h1><h3 id="全局变量-全局都可以使用-局部作用域下的是局部变量-只能在函数内部使用"><a href="#全局变量-全局都可以使用-局部作用域下的是局部变量-只能在函数内部使用" class="headerlink" title="全局变量:全局都可以使用;局部作用域下的是局部变量,只能在函数内部使用"></a>全局变量:全局都可以使用;局部作用域下的是局部变量,只能在函数内部使用</h3><h3 id="在函数内部没有声明直接赋值的变量也属于局部变量-局部变量更节省资源-函数形参也是局部变量"><a href="#在函数内部没有声明直接赋值的变量也属于局部变量-局部变量更节省资源-函数形参也是局部变量" class="headerlink" title="在函数内部没有声明直接赋值的变量也属于局部变量,局部变量更节省资源,函数形参也是局部变量"></a>在函数内部没有声明直接赋值的变量也属于局部变量,局部变量更节省资源,函数形参也是局部变量</h3><h3 id="js中在es6才有块级作用域"><a href="#js中在es6才有块级作用域" class="headerlink" title="js中在es6才有块级作用域"></a>js中在es6才有块级作用域</h3><h3 id="作用域链-内部函数访问外部函数的变量-采取的是链式查找的方式来决定取哪个值-这种结构我们称作作用域链-就近原则"><a href="#作用域链-内部函数访问外部函数的变量-采取的是链式查找的方式来决定取哪个值-这种结构我们称作作用域链-就近原则" class="headerlink" title="作用域链:内部函数访问外部函数的变量,采取的是链式查找的方式来决定取哪个值,这种结构我们称作作用域链(就近原则)"></a>作用域链:内部函数访问外部函数的变量,采取的是链式查找的方式来决定取哪个值,这种结构我们称作作用域链(就近原则)</h3><hr><hr><h1 id="预解析"><a href="#预解析" class="headerlink" title="预解析"></a>预解析</h1><h2 id="js引擎运行js分为两步-预解析-代码"><a href="#js引擎运行js分为两步-预解析-代码" class="headerlink" title="js引擎运行js分为两步:预解析 代码"></a>js引擎运行js分为两步:预解析 代码</h2><h3 id="预解析-js引擎会把js里面所有的var还有function提升到当前作用域的最前面"><a href="#预解析-js引擎会把js里面所有的var还有function提升到当前作用域的最前面" class="headerlink" title="预解析:js引擎会把js里面所有的var还有function提升到当前作用域的最前面"></a>预解析:js引擎会把js里面所有的var还有function提升到当前作用域的最前面</h3><h3 id="代码执行-按照代码的书写顺序从上往下执行"><a href="#代码执行-按照代码的书写顺序从上往下执行" class="headerlink" title="代码执行:按照代码的书写顺序从上往下执行"></a>代码执行:按照代码的书写顺序从上往下执行</h3><h2 id="预解析分为-变量预解析-变量提升-和函数预解析-函数提升"><a href="#预解析分为-变量预解析-变量提升-和函数预解析-函数提升" class="headerlink" title="预解析分为:变量预解析(变量提升)和函数预解析(函数提升)"></a>预解析分为:变量预解析(变量提升)和函数预解析(函数提升)</h2><h3 id="变量提升-就是把所有的变量声明提升到当前的作用域最前面-不提升赋值操作"><a href="#变量提升-就是把所有的变量声明提升到当前的作用域最前面-不提升赋值操作" class="headerlink" title="变量提升:就是把所有的变量声明提升到当前的作用域最前面,不提升赋值操作"></a>变量提升:就是把所有的变量声明提升到当前的作用域最前面,不提升赋值操作</h3><h3 id="函数提升-就是把所有的函数声明提升到当前作用域的最前面-不调用函数"><a href="#函数提升-就是把所有的函数声明提升到当前作用域的最前面-不调用函数" class="headerlink" title="函数提升:就是把所有的函数声明提升到当前作用域的最前面,不调用函数"></a>函数提升:就是把所有的函数声明提升到当前作用域的最前面,不调用函数</h3><hr><hr><h1 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h1><h2 id="一个具体的事务"><a href="#一个具体的事务" class="headerlink" title="一个具体的事务"></a>一个具体的事务</h2><h3 id="在JavaScript中-对象是一组无序的相关属性和方法的集合-所有的事物都是对象"><a href="#在JavaScript中-对象是一组无序的相关属性和方法的集合-所有的事物都是对象" class="headerlink" title="在JavaScript中,对象是一组无序的相关属性和方法的集合,所有的事物都是对象."></a>在JavaScript中,对象是一组无序的相关属性和方法的集合,所有的事物都是对象.</h3><h3 id="属性-特征-方法-行为"><a href="#属性-特征-方法-行为" class="headerlink" title="属性:特征;方法:行为"></a>属性:特征;方法:行为</h3><h2 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h2><h3 id="利用对象字面量创建对象"><a href="#利用对象字面量创建对象" class="headerlink" title="利用对象字面量创建对象{}"></a>利用对象字面量创建对象{}</h3><h3 id="var-obj-umane-39-zombie-39-age-21-sayhi-function"><a href="#var-obj-umane-39-zombie-39-age-21-sayhi-function" class="headerlink" title="var obj = {umane: &#39;zombie&#39;,age: 21,sayhi:function(){}}"></a><code>var obj = &#123;umane: &#39;zombie&#39;,age: 21,sayhi:function()&#123;&#125;&#125;</code></h3><h4 id="里面的属性或者方法采取键值对的形式"><a href="#里面的属性或者方法采取键值对的形式" class="headerlink" title="里面的属性或者方法采取键值对的形式"></a>里面的属性或者方法采取键值对的形式</h4><h4 id="多个属性或者方法中间用逗号隔开的"><a href="#多个属性或者方法中间用逗号隔开的" class="headerlink" title="多个属性或者方法中间用逗号隔开的"></a>多个属性或者方法中间用逗号隔开的</h4><h4 id="方法冒号后面跟的是一个匿名函数"><a href="#方法冒号后面跟的是一个匿名函数" class="headerlink" title="方法冒号后面跟的是一个匿名函数"></a>方法冒号后面跟的是一个匿名函数</h4><h3 id="利用new-Object创建对象"><a href="#利用new-Object创建对象" class="headerlink" title="利用new Object创建对象"></a>利用new Object创建对象</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">obj.uname = <span class="string">&#x27;zombie&#x27;</span>;</span><br><span class="line">obj.age = <span class="number">18</span>;</span><br><span class="line">obj.sex = <span class="string">&#x27;男&#x27;</span>;</span><br><span class="line">obj.zombie = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br></pre></td></tr></table></figure><h2 id="使用对象"><a href="#使用对象" class="headerlink" title="使用对象"></a>使用对象</h2><h3 id="调用对象的属性-对象名-属性名"><a href="#调用对象的属性-对象名-属性名" class="headerlink" title="调用对象的属性 对象名.属性名"></a>调用对象的属性 对象名.属性名</h3><h3 id="调用属性还有一种方式-对象名-‘属性名’"><a href="#调用属性还有一种方式-对象名-‘属性名’" class="headerlink" title="调用属性还有一种方式 对象名[‘属性名’]"></a>调用属性还有一种方式 对象名[‘属性名’]</h3><h3 id="调用对象的方法-对象名-方法名"><a href="#调用对象的方法-对象名-方法名" class="headerlink" title="调用对象的方法 对象名.方法名()"></a>调用对象的方法 对象名.方法名()</h3><h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> zombie = &#123;</span><br><span class="line"><span class="attr">uname</span>: <span class="string">&#x27;zombie&#x27;</span>,</span><br><span class="line"><span class="attr">age</span>: <span class="number">1</span>,</span><br><span class="line"><span class="attr">play</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;java&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> zheng = &#123;</span><br><span class="line">    <span class="attr">uname</span>: <span class="string">&#x27;zheng&#x27;</span>,</span><br><span class="line"><span class="attr">age</span>: <span class="number">21</span>,</span><br><span class="line"><span class="attr">play</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;javascript&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//这就可以用构造函数了,把重复代码放到函数中</span></span><br><span class="line"><span class="comment">//构造函数就是把对象里的一些相同属性和方法抽象出来封装到函数里面</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="三种方式"><a href="#三种方式" class="headerlink" title="三种方式"></a>三种方式</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> 构造函数名(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">this</span>.属性 = 值;</span><br><span class="line">    <span class="built_in">this</span>.方法 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;<span class="comment">//构造函数不需要return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">new</span> 构造函数名();<span class="comment">//调用构造函数,返回的是一个对象</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Star</span>(<span class="params">uname,age,sex</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = uname;</span><br><span class="line">    <span class="built_in">this</span>.age = age;</span><br><span class="line">    <span class="built_in">this</span>.sex = sex;</span><br><span class="line">    <span class="built_in">this</span>.play = <span class="function"><span class="keyword">function</span>(<span class="params">pp</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(pp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> zombie = <span class="keyword">new</span> Star(<span class="string">&#x27;zombie&#x27;</span>,<span class="number">1</span>,<span class="string">&#x27;男&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> zheng = <span class="keyword">new</span> Star(<span class="string">&#x27;zheng&#x27;</span>,<span class="number">21</span>,<span class="string">&#x27;男&#x27;</span>);</span><br><span class="line">zombie.play(<span class="string">&#x27;java&#x27;</span>);</span><br><span class="line"><span class="comment">//属性和方法前面必须添加this</span></span><br></pre></td></tr></table></figure><h3 id="new在执行时会做四件事情"><a href="#new在执行时会做四件事情" class="headerlink" title="new在执行时会做四件事情"></a>new在执行时会做四件事情</h3><h4 id="在内存中创建一个新的空对象"><a href="#在内存中创建一个新的空对象" class="headerlink" title="在内存中创建一个新的空对象"></a>在内存中创建一个新的空对象</h4><h4 id="让this指向这个新的对象"><a href="#让this指向这个新的对象" class="headerlink" title="让this指向这个新的对象"></a>让this指向这个新的对象</h4><h4 id="执行构造函数里面的代码-给这个新对象添加属性和方法"><a href="#执行构造函数里面的代码-给这个新对象添加属性和方法" class="headerlink" title="执行构造函数里面的代码,给这个新对象添加属性和方法"></a>执行构造函数里面的代码,给这个新对象添加属性和方法</h4><h4 id="返回这个新对象"><a href="#返回这个新对象" class="headerlink" title="返回这个新对象"></a>返回这个新对象</h4><h2 id="遍历对象"><a href="#遍历对象" class="headerlink" title="遍历对象"></a>遍历对象</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//for...in语句用于对数组或者对象的属性进行循环操作</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    name = <span class="string">&#x27;zombie&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">21</span>,</span><br><span class="line">    <span class="attr">sex</span>: <span class="string">&#x27;男&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> obj)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(key);<span class="comment">//输出属性名</span></span><br><span class="line">    <span class="built_in">console</span>.log(obj[key]);<span class="comment">//输出属性值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/%E5%89%8D%E7%AB%AF/">前端</category>
      
      
      <category domain="http://example.com/tags/%E5%AF%BC%E8%88%AA/">导航</category>
      
      <category domain="http://example.com/tags/%E5%88%86%E4%BA%AB/">分享</category>
      
      
      <comments>http://example.com/2021/06/11/JavaScript/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>java字符串</title>
      <link>http://example.com/2021/06/10/java%E5%AD%97%E7%AC%A6%E4%B8%B2/</link>
      <guid>http://example.com/2021/06/10/java%E5%AD%97%E7%AC%A6%E4%B8%B2/</guid>
      <pubDate>Thu, 10 Jun 2021 12:59:36 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;字符串&quot;&gt;&lt;a href=&quot;#字符串&quot; class=&quot;headerlink&quot; title=&quot;字符串&quot;&gt;&lt;/a&gt;字符串&lt;/h1&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><span id="more"></span><h2 id="声明字符串变量必须经过初始化才可以使用，否则编译器会报出“变量未被初始化错误”"><a href="#声明字符串变量必须经过初始化才可以使用，否则编译器会报出“变量未被初始化错误”" class="headerlink" title="声明字符串变量必须经过初始化才可以使用，否则编译器会报出“变量未被初始化错误”"></a>声明字符串变量必须经过初始化才可以使用，否则编译器会报出“变量未被初始化错误”</h2><h3 id="String-char-a-用一个字符数组a创建string对象。"><a href="#String-char-a-用一个字符数组a创建string对象。" class="headerlink" title="String(char a[]//用一个字符数组a创建string对象。"></a><code>String(char a[]</code>//用一个字符数组a创建string对象。</h3><h3 id="String-char-a-int-offset-int-length-提取字符数组中的一部分创建一个字符串对象，开始位置和长度"><a href="#String-char-a-int-offset-int-length-提取字符数组中的一部分创建一个字符串对象，开始位置和长度" class="headerlink" title="String(char a[],int offset,int length)//提取字符数组中的一部分创建一个字符串对象，开始位置和长度"></a><code>String(char a[],int offset,int length)</code>//提取字符数组中的一部分创建一个字符串对象，开始位置和长度</h3><h3 id="String-char-value-该构造方法可以分配一个新的string对象，使其表示字符数组参数中所有元素连接的结果"><a href="#String-char-value-该构造方法可以分配一个新的string对象，使其表示字符数组参数中所有元素连接的结果" class="headerlink" title="String(char[] value)//该构造方法可以分配一个新的string对象，使其表示字符数组参数中所有元素连接的结果"></a><code>String(char[] value)</code>//该构造方法可以分配一个新的string对象，使其表示字符数组参数中所有元素连接的结果</h3><hr><hr><h2 id="对字符串进行操作"><a href="#对字符串进行操作" class="headerlink" title="对字符串进行操作"></a>对字符串进行操作</h2><h3 id="long-starTime-System-currentTimeMillis-定义对字符串执行操作的起始时间"><a href="#long-starTime-System-currentTimeMillis-定义对字符串执行操作的起始时间" class="headerlink" title="long starTime = System.currentTimeMillis(); //定义对字符串执行操作的起始时间"></a><code>long starTime = System.currentTimeMillis();</code> //定义对字符串执行操作的起始时间</h3><h3 id="long-endTime-System-currentTimeMillis-定义对字符串操作后的时间"><a href="#long-endTime-System-currentTimeMillis-定义对字符串操作后的时间" class="headerlink" title="long endTime = System.currentTimeMillis();//定义对字符串操作后的时间"></a><code>long endTime = System.currentTimeMillis();</code>//定义对字符串操作后的时间</h3><h3 id="StringBuilder-builder-new-StringBuilder-quot-quot-创建字符串生成器"><a href="#StringBuilder-builder-new-StringBuilder-quot-quot-创建字符串生成器" class="headerlink" title="StringBuilder builder = new StringBuilder(&quot;&quot;);//创建字符串生成器"></a><code>StringBuilder builder = new StringBuilder(&quot;&quot;);</code>//创建字符串生成器</h3><h3 id="append-content-该方法用于向字符串生成器中追加内容，通过该方法的多个重载形式，可实现接受任何类型的数据，如int-boolean-char-String-double或者另一个字符串生成器等"><a href="#append-content-该方法用于向字符串生成器中追加内容，通过该方法的多个重载形式，可实现接受任何类型的数据，如int-boolean-char-String-double或者另一个字符串生成器等" class="headerlink" title="append(content)//该方法用于向字符串生成器中追加内容，通过该方法的多个重载形式，可实现接受任何类型的数据，如int boolean char String double或者另一个字符串生成器等"></a><code>append(content)</code>//该方法用于向字符串生成器中追加内容，通过该方法的多个重载形式，可实现接受任何类型的数据，如<code>int boolean char String double</code>或者另一个字符串生成器等</h3><h4 id="content表示要追加到字符串生成器中的内容，可以是任何类型的数据或者其他对象"><a href="#content表示要追加到字符串生成器中的内容，可以是任何类型的数据或者其他对象" class="headerlink" title="content表示要追加到字符串生成器中的内容，可以是任何类型的数据或者其他对象"></a>content表示要追加到字符串生成器中的内容，可以是任何类型的数据或者其他对象</h4><h3 id="insert-int-offset-arg-该方法用于向字符串生成器中的指定位置插入数据内容。通过该方法的不同重载形式，可实现向字符串生成器中插入int-float-char-boolean等基本数据类型或其他对象"><a href="#insert-int-offset-arg-该方法用于向字符串生成器中的指定位置插入数据内容。通过该方法的不同重载形式，可实现向字符串生成器中插入int-float-char-boolean等基本数据类型或其他对象" class="headerlink" title="insert(int offset,arg)//该方法用于向字符串生成器中的指定位置插入数据内容。通过该方法的不同重载形式，可实现向字符串生成器中插入int float char boolean等基本数据类型或其他对象"></a><code>insert(int offset,arg)</code>//该方法用于向字符串生成器中的指定位置插入数据内容。通过该方法的不同重载形式，可实现向字符串生成器中插入<code>int float char boolean</code>等基本数据类型或其他对象</h3><h4 id="offset：字符串生成器的位置，该参数必须大于等于0，且小于等于此序列的长度-arg：将插入至字符串生成器的位置"><a href="#offset：字符串生成器的位置，该参数必须大于等于0，且小于等于此序列的长度-arg：将插入至字符串生成器的位置" class="headerlink" title="offset：字符串生成器的位置，该参数必须大于等于0，且小于等于此序列的长度;arg：将插入至字符串生成器的位置."></a>offset：字符串生成器的位置，该参数必须大于等于0，且小于等于此序列的长度;arg：将插入至字符串生成器的位置.</h4><h3 id="delete-nt-start-int-end-移除此序列的子字符串中的字符。该子字符串从指定的start处开始，一直到索引end-1处的字符，如果不存在这种字符，则一直到序列尾部。如果start等于end，则不发生任何改变"><a href="#delete-nt-start-int-end-移除此序列的子字符串中的字符。该子字符串从指定的start处开始，一直到索引end-1处的字符，如果不存在这种字符，则一直到序列尾部。如果start等于end，则不发生任何改变" class="headerlink" title="delete(nt start,int end)//移除此序列的子字符串中的字符。该子字符串从指定的start处开始，一直到索引end-1处的字符，如果不存在这种字符，则一直到序列尾部。如果start等于end，则不发生任何改变"></a><code>delete(nt start,int end)</code>//移除此序列的子字符串中的字符。该子字符串从指定的start处开始，一直到索引end-1处的字符，如果不存在这种字符，则一直到序列尾部。如果start等于end，则不发生任何改变</h3><hr><hr><h2 id="使用正则表达式"><a href="#使用正则表达式" class="headerlink" title="使用正则表达式"></a>使用正则表达式</h2><p><img src="D:\Blog\source\images\QQ截图20210611213606.png" alt="QQ截图20210611213606"></p><h3 id="在正则表达式中“-”代表任何一个字符，因此在正则表达式中如果想使用普通意义的点字符“-”-必须使用转义字符“-”"><a href="#在正则表达式中“-”代表任何一个字符，因此在正则表达式中如果想使用普通意义的点字符“-”-必须使用转义字符“-”" class="headerlink" title="在正则表达式中“.”代表任何一个字符，因此在正则表达式中如果想使用普通意义的点字符“.”,必须使用转义字符“\”"></a>在正则表达式中“.”代表任何一个字符，因此在正则表达式中如果想使用普通意义的点字符“.”,必须使用转义字符“\”</h3><h3 id="String-fristArray-str-split-quot-quot-按照“-”进行分割，使用转义字符”-”"><a href="#String-fristArray-str-split-quot-quot-按照“-”进行分割，使用转义字符”-”" class="headerlink" title="String[] fristArray = str.split(&quot;\\.&quot;);//按照“.”进行分割，使用转义字符”\.”"></a><code>String[] fristArray = str.split(&quot;\\.&quot;);</code>//按照“.”进行分割，使用转义字符”\.”</h3><h3 id="String-secondArray-str-split-quot-quot-2-按照”-”进行两次分割，使用转义字符”-‘"><a href="#String-secondArray-str-split-quot-quot-2-按照”-”进行两次分割，使用转义字符”-‘" class="headerlink" title="*String****[] secondArray = str.split(&quot;\\\\.&quot;,2);//按照”.”进行两次分割，使用转义字符”\.‘"></a><code>*String****[] secondArray = str.split(&quot;\\\\.&quot;,2);</code>//按照”.”进行两次分割，使用转义字符”\.‘</h3><p><img src="D:\Blog\source\images\QQ截图20210611214016.png" alt="QQ截图20210611214016"></p><hr><hr><h2 id="字符串的方法"><a href="#字符串的方法" class="headerlink" title="字符串的方法"></a>字符串的方法</h2><h3 id="int-size-str-length-获取字符串的长度"><a href="#int-size-str-length-获取字符串的长度" class="headerlink" title="int size = str.length();//获取字符串的长度"></a><code>int size = str.length();</code>//获取字符串的长度</h3><h3 id="int-size1-str-indexOf-quot-a-quot-该方法用于返回参数字符串s在指定字符串中首次出现的索引位置。没有则是-1"><a href="#int-size1-str-indexOf-quot-a-quot-该方法用于返回参数字符串s在指定字符串中首次出现的索引位置。没有则是-1" class="headerlink" title="int size1 = str.indexOf(&quot;a&quot;);//该方法用于返回参数字符串s在指定字符串中首次出现的索引位置。没有则是-1."></a><code>int size1 = str.indexOf(&quot;a&quot;);</code>//该方法用于返回参数字符串s在指定字符串中首次出现的索引位置。没有则是-1.</h3><h3 id="int-size2-str-lastIndexOf-quot-a-quot-如果为空，则获取的是长度。"><a href="#int-size2-str-lastIndexOf-quot-a-quot-如果为空，则获取的是长度。" class="headerlink" title="int size2 = str.lastIndexOf(&quot;a&quot;);//如果为空，则获取的是长度。"></a><code>int size2 = str.lastIndexOf(&quot;a&quot;);</code>//如果为空，则获取的是长度。</h3><h3 id="char-mychar-str-charAt-5-将该指定索引处的字符返回。"><a href="#char-mychar-str-charAt-5-将该指定索引处的字符返回。" class="headerlink" title="char mychar = str.charAt(5);//将该指定索引处的字符返回。"></a><code>char mychar = str.charAt(5);</code>//将该指定索引处的字符返回。</h3><h3 id="String-substr-str-substring-3-该方法返回的是从指定的索引位置开始截取直到该字符串结尾的子串。在字符串中空格占一个索引位置。"><a href="#String-substr-str-substring-3-该方法返回的是从指定的索引位置开始截取直到该字符串结尾的子串。在字符串中空格占一个索引位置。" class="headerlink" title="String substr = str.substring(3);//该方法返回的是从指定的索引位置开始截取直到该字符串结尾的子串。在字符串中空格占一个索引位置。"></a><code>String substr = str.substring(3);</code>//该方法返回的是从指定的索引位置开始截取直到该字符串结尾的子串。在字符串中空格占一个索引位置。</h3><h3 id="String-substr1-str-substring-0-3-该方法返回的是从字符串某一索引位置开始截取至某一索引位置结束的子串。"><a href="#String-substr1-str-substring-0-3-该方法返回的是从字符串某一索引位置开始截取至某一索引位置结束的子串。" class="headerlink" title="String substr1 = str.substring(0,3);//该方法返回的是从字符串某一索引位置开始截取至某一索引位置结束的子串。"></a><code>String substr1 = str.substring(0,3);</code>//该方法返回的是从字符串某一索引位置开始截取至某一索引位置结束的子串。</h3><h3 id="str-trim-该方法返回字符串的副本，忽略前导空格和尾部空格。"><a href="#str-trim-该方法返回字符串的副本，忽略前导空格和尾部空格。" class="headerlink" title="str.trim();//该方法返回字符串的副本，忽略前导空格和尾部空格。"></a><code>str.trim();</code>//该方法返回字符串的副本，忽略前导空格和尾部空格。</h3><h3 id="String-newstr-str-replace-quot-e-quot-quot-E-quot-该方法可实现将指定的字符或字符串替换成新的字符或者字符串。如果要替换的字符oldChar在字符串中重复出现多次，replace-方法会将所有oldChar全部替换成newChar-需要注意的是，要替换的字符oldChar的大小写要与元字符串中的字符的大小写保持一致，否则不能成功的替换。"><a href="#String-newstr-str-replace-quot-e-quot-quot-E-quot-该方法可实现将指定的字符或字符串替换成新的字符或者字符串。如果要替换的字符oldChar在字符串中重复出现多次，replace-方法会将所有oldChar全部替换成newChar-需要注意的是，要替换的字符oldChar的大小写要与元字符串中的字符的大小写保持一致，否则不能成功的替换。" class="headerlink" title="String newstr = str.replace(&quot;e&quot;,&quot;E&quot;);//该方法可实现将指定的字符或字符串替换成新的字符或者字符串。如果要替换的字符oldChar在字符串中重复出现多次，replace()方法会将所有oldChar全部替换成newChar.需要注意的是，要替换的字符oldChar的大小写要与元字符串中的字符的大小写保持一致，否则不能成功的替换。"></a><code>String newstr = str.replace(&quot;e&quot;,&quot;E&quot;);</code>//该方法可实现将指定的字符或字符串替换成新的字符或者字符串。如果要替换的字符oldChar在字符串中重复出现多次，replace()方法会将所有oldChar全部替换成newChar.需要注意的是，要替换的字符oldChar的大小写要与元字符串中的字符的大小写保持一致，否则不能成功的替换。</h3><h3 id="boolean-b-num1-startsWith-quot-22-quot"><a href="#boolean-b-num1-startsWith-quot-22-quot" class="headerlink" title="boolean b = num1.startsWith(&quot;22&quot;);"></a><code>boolean b = num1.startsWith(&quot;22&quot;);</code></h3><h3 id="boolean-b1-num1-endsWith-quot-12-quot-这两个方法分别用于判断该字符串是否以指定的内容开始或者结束。这两个方法的返回值都为boolean类型。"><a href="#boolean-b1-num1-endsWith-quot-12-quot-这两个方法分别用于判断该字符串是否以指定的内容开始或者结束。这两个方法的返回值都为boolean类型。" class="headerlink" title="boolean b1 = num1.endsWith(&quot;12&quot;);//这两个方法分别用于判断该字符串是否以指定的内容开始或者结束。这两个方法的返回值都为boolean类型。"></a><code>boolean b1 = num1.endsWith(&quot;12&quot;);</code>//这两个方法分别用于判断该字符串是否以指定的内容开始或者结束。这两个方法的返回值都为boolean类型。</h3><h3 id="boolean-c-s1-equals-s2-如果两个字符串具有相同的字符和长度，则使用equals（）方法进行比较时，返回true。"><a href="#boolean-c-s1-equals-s2-如果两个字符串具有相同的字符和长度，则使用equals（）方法进行比较时，返回true。" class="headerlink" title="boolean c = s1.equals(s2);//如果两个字符串具有相同的字符和长度，则使用equals（）方法进行比较时，返回true。"></a><code>boolean c = s1.equals(s2);</code>//如果两个字符串具有相同的字符和长度，则使用equals（）方法进行比较时，返回true。</h3><h3 id="boolean-d-s1-equalsIgnoreCase-s2-使用equals方法对字符串进行比较时是区分大小写的，而使用equalsIgnoreCase方法是在忽略了大小写的情况下比较两个字符串是否相等，返回结果仍为Boolean类型"><a href="#boolean-d-s1-equalsIgnoreCase-s2-使用equals方法对字符串进行比较时是区分大小写的，而使用equalsIgnoreCase方法是在忽略了大小写的情况下比较两个字符串是否相等，返回结果仍为Boolean类型" class="headerlink" title="boolean d = s1.equalsIgnoreCase(s2);//使用equals方法对字符串进行比较时是区分大小写的，而使用equalsIgnoreCase方法是在忽略了大小写的情况下比较两个字符串是否相等，返回结果仍为Boolean类型"></a><code>boolean d = s1.equalsIgnoreCase(s2);</code>//使用equals方法对字符串进行比较时是区分大小写的，而使用equalsIgnoreCase方法是在忽略了大小写的情况下比较两个字符串是否相等，返回结果仍为Boolean类型</h3><h3 id="s1-compareTo-s2-将s1与s2比较的结果输出。该方法为按字典顺序比较两个字符串，该比较基于字符串中哥哥字符串中各个字符的Unicode值，按字典顺序将此String对象表示的字符序列与参数字符串所表示的字符序列进行比较。如果按字典顺序此String对象位于参数字符串之前，则比较结果为一个负整数；如果按字典顺序此String对象位于参数字符串之后，则比较结果为一个正整数；如果这两个字符串相等，则结果为0；该方法只有在equals-Object-方法返回true时才返回0"><a href="#s1-compareTo-s2-将s1与s2比较的结果输出。该方法为按字典顺序比较两个字符串，该比较基于字符串中哥哥字符串中各个字符的Unicode值，按字典顺序将此String对象表示的字符序列与参数字符串所表示的字符序列进行比较。如果按字典顺序此String对象位于参数字符串之前，则比较结果为一个负整数；如果按字典顺序此String对象位于参数字符串之后，则比较结果为一个正整数；如果这两个字符串相等，则结果为0；该方法只有在equals-Object-方法返回true时才返回0" class="headerlink" title="s1.compareTo(s2);//将s1与s2比较的结果输出。该方法为按字典顺序比较两个字符串，该比较基于字符串中哥哥字符串中各个字符的Unicode值，按字典顺序将此String对象表示的字符序列与参数字符串所表示的字符序列进行比较。如果按字典顺序此String对象位于参数字符串之前，则比较结果为一个负整数；如果按字典顺序此String对象位于参数字符串之后，则比较结果为一个正整数；如果这两个字符串相等，则结果为0；该方法只有在equals(Object)方法返回true时才返回0."></a><code>s1.compareTo(s2);</code>//将s1与s2比较的结果输出。该方法为按字典顺序比较两个字符串，该比较基于字符串中哥哥字符串中各个字符的Unicode值，按字典顺序将此String对象表示的字符序列与参数字符串所表示的字符序列进行比较。如果按字典顺序此String对象位于参数字符串之前，则比较结果为一个负整数；如果按字典顺序此String对象位于参数字符串之后，则比较结果为一个正整数；如果这两个字符串相等，则结果为0；该方法只有在equals(Object)方法返回true时才返回0.</h3><h3 id="String-news1-s2-toLowerCase-大写变小写"><a href="#String-news1-s2-toLowerCase-大写变小写" class="headerlink" title="String news1 = s2.toLowerCase();//大写变小写"></a><code>String news1 = s2.toLowerCase();</code>//大写变小写</h3><h3 id="String-news2-s1-toUpperCase-小写变大写-使用这两种方法时进行大小写转换时，数字或非字符不受影响。"><a href="#String-news2-s1-toUpperCase-小写变大写-使用这两种方法时进行大小写转换时，数字或非字符不受影响。" class="headerlink" title="String news2 = s1.toUpperCase();//小写变大写,使用这两种方法时进行大小写转换时，数字或非字符不受影响。"></a><code>String news2 = s1.toUpperCase();</code>//小写变大写,使用这两种方法时进行大小写转换时，数字或非字符不受影响。</h3><hr><hr><h2 id="常规类型格式化"><a href="#常规类型格式化" class="headerlink" title="常规类型格式化"></a>常规类型格式化</h2><h3 id="str-format-String-format-Object-args-该方法使用指定的格式字符串和参数返回一个格式化字符串，格式化后的新字符串使用本地默认的语言环境-format：格式字符串-args-格式字符串中由格式说明符引用的参数，如果还有格式说明符以外的参数，则忽略这些额外的参数，此参数的数目是可变的，可以为0；"><a href="#str-format-String-format-Object-args-该方法使用指定的格式字符串和参数返回一个格式化字符串，格式化后的新字符串使用本地默认的语言环境-format：格式字符串-args-格式字符串中由格式说明符引用的参数，如果还有格式说明符以外的参数，则忽略这些额外的参数，此参数的数目是可变的，可以为0；" class="headerlink" title="str.format(String format,Object...args)//该方法使用指定的格式字符串和参数返回一个格式化字符串，格式化后的新字符串使用本地默认的语言环境;format：格式字符串;args:格式字符串中由格式说明符引用的参数，如果还有格式说明符以外的参数，则忽略这些额外的参数，此参数的数目是可变的，可以为0；"></a><code>str.format(String format,Object...args)</code>//该方法使用指定的格式字符串和参数返回一个格式化字符串，格式化后的新字符串使用本地默认的语言环境;format：格式字符串;args:格式字符串中由格式说明符引用的参数，如果还有格式说明符以外的参数，则忽略这些额外的参数，此参数的数目是可变的，可以为0；</h3><h3 id="format-Local-1-String-format-Object-args-格式化过程中要应用的语言环境，如果1为null-则不进行本地化。"><a href="#format-Local-1-String-format-Object-args-格式化过程中要应用的语言环境，如果1为null-则不进行本地化。" class="headerlink" title="format(Local 1,String format,Object...args)//格式化过程中要应用的语言环境，如果1为null,则不进行本地化。"></a><code>format(Local 1,String format,Object...args)</code>//格式化过程中要应用的语言环境，如果1为null,则不进行本地化。</h3><p><img src="D:\Blog\source\images\QQ截图20210611214940.png" alt="QQ截图20210611214940"></p><hr><hr><h2 id="格式化常见的日期时间组合"><a href="#格式化常见的日期时间组合" class="headerlink" title="格式化常见的日期时间组合"></a>格式化常见的日期时间组合</h2><p><img src="D:\Blog\source\images\QQ截图20210611215032.png" alt="QQ截图20210611215032"></p><hr><hr><h2 id="时间格式化"><a href="#时间格式化" class="headerlink" title="时间格式化"></a>时间格式化</h2><p><img src="D:\Blog\source\images\QQ截图20210611215114.png" alt="QQ截图20210611215114"></p><hr><hr><h2 id="日期格式化"><a href="#日期格式化" class="headerlink" title="日期格式化"></a>日期格式化</h2><p><img src="D:\Blog\source\images\QQ截图20210611215156.png" alt="QQ截图20210611215156"></p><hr><hr>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/java/">java</category>
      
      
      <category domain="http://example.com/tags/%E5%AF%BC%E8%88%AA/">导航</category>
      
      <category domain="http://example.com/tags/%E5%88%86%E4%BA%AB/">分享</category>
      
      
      <comments>http://example.com/2021/06/10/java%E5%AD%97%E7%AC%A6%E4%B8%B2/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Hello World</title>
      <link>http://example.com/2021/06/09/hello-world/</link>
      <guid>http://example.com/2021/06/09/hello-world/</guid>
      <pubDate>Wed, 09 Jun 2021 07:12:04 GMT</pubDate>
      
      <description>&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><span id="more"></span><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><ul><li>列表1</li><li>列表2<pre><code> a 子列表a b 子列表b</code></pre></li></ul><p>#<a href="%E5%9C%B0%E5%9D%80">导航</a></p><p>#<img src="%E5%9C%B0%E5%9D%80" alt="图片名称"></p><hr><hr><p><em>字体是斜线的哦</em><br><strong>字体是加粗的哦</strong></p><p><code>&lt;html&gt;&lt;/html&gt;</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tiitle</span>&gt;</span>我是多行代码块<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>我的内容是引用的哦</p></blockquote><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content:encoded>
      
      
      
      
      <comments>http://example.com/2021/06/09/hello-world/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
